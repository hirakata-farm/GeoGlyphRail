!function(f){if("object"==typeof exports&&"undefined"!=typeof module)module.exports=f();else if("function"==typeof define&&define.amd)define([],f);else{("undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:this).PathFinder=f()}}(function(){return function(){return function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){return o(e[i][1][r]||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}}()({1:[function(require,module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var meta_1=require("@turf/meta");function bbox(geojson){var result=[1/0,1/0,-1/0,-1/0];return meta_1.coordEach(geojson,function(coord){result[0]>coord[0]&&(result[0]=coord[0]),result[1]>coord[1]&&(result[1]=coord[1]),result[2]<coord[0]&&(result[2]=coord[0]),result[3]<coord[1]&&(result[3]=coord[1])}),result}bbox.default=bbox,exports.default=bbox},{"@turf/meta":10}],2:[function(require,module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var helpers_1=require("@turf/helpers"),invariant_1=require("@turf/invariant");function bearing(start,end,options){if(void 0===options&&(options={}),!0===options.final)return function(start,end){var bear=bearing(end,start);return bear=(bear+180)%360}(start,end);var coordinates1=invariant_1.getCoord(start),coordinates2=invariant_1.getCoord(end),lon1=helpers_1.degreesToRadians(coordinates1[0]),lon2=helpers_1.degreesToRadians(coordinates2[0]),lat1=helpers_1.degreesToRadians(coordinates1[1]),lat2=helpers_1.degreesToRadians(coordinates2[1]),a=Math.sin(lon2-lon1)*Math.cos(lat2),b=Math.cos(lat1)*Math.sin(lat2)-Math.sin(lat1)*Math.cos(lat2)*Math.cos(lon2-lon1);return helpers_1.radiansToDegrees(Math.atan2(a,b))}exports.default=bearing},{"@turf/helpers":6,"@turf/invariant":7}],3:[function(require,module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var helpers_1=require("@turf/helpers"),invariant_1=require("@turf/invariant");exports.default=function(origin,distance,bearing,options){void 0===options&&(options={});var coordinates1=invariant_1.getCoord(origin),longitude1=helpers_1.degreesToRadians(coordinates1[0]),latitude1=helpers_1.degreesToRadians(coordinates1[1]),bearingRad=helpers_1.degreesToRadians(bearing),radians=helpers_1.lengthToRadians(distance,options.units),latitude2=Math.asin(Math.sin(latitude1)*Math.cos(radians)+Math.cos(latitude1)*Math.sin(radians)*Math.cos(bearingRad)),longitude2=longitude1+Math.atan2(Math.sin(bearingRad)*Math.sin(radians)*Math.cos(latitude1),Math.cos(radians)-Math.sin(latitude1)*Math.sin(latitude2)),lng=helpers_1.radiansToDegrees(longitude2),lat=helpers_1.radiansToDegrees(latitude2);return helpers_1.point([lng,lat],options.properties)}},{"@turf/helpers":6,"@turf/invariant":7}],4:[function(require,module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var invariant_1=require("@turf/invariant"),helpers_1=require("@turf/helpers");exports.default=function(from,to,options){void 0===options&&(options={});var coordinates1=invariant_1.getCoord(from),coordinates2=invariant_1.getCoord(to),dLat=helpers_1.degreesToRadians(coordinates2[1]-coordinates1[1]),dLon=helpers_1.degreesToRadians(coordinates2[0]-coordinates1[0]),lat1=helpers_1.degreesToRadians(coordinates1[1]),lat2=helpers_1.degreesToRadians(coordinates2[1]),a=Math.pow(Math.sin(dLat/2),2)+Math.pow(Math.sin(dLon/2),2)*Math.cos(lat1)*Math.cos(lat2);return helpers_1.radiansToLength(2*Math.atan2(Math.sqrt(a),Math.sqrt(1-a)),options.units)}},{"@turf/helpers":6,"@turf/invariant":7}],5:[function(require,module,exports){"use strict";var meta=require("@turf/meta"),helpers=require("@turf/helpers");function explode(geojson){var points=[];return"FeatureCollection"===geojson.type?meta.featureEach(geojson,function(feature){meta.coordEach(feature,function(coord){points.push(helpers.point(coord,feature.properties))})}):meta.coordEach(geojson,function(coord){points.push(helpers.point(coord,geojson.properties))}),helpers.featureCollection(points)}module.exports=explode,module.exports.default=explode},{"@turf/helpers":6,"@turf/meta":10}],6:[function(require,module,exports){"use strict";function feature(geom,properties,options){void 0===options&&(options={});var feat={type:"Feature"};return(0===options.id||options.id)&&(feat.id=options.id),options.bbox&&(feat.bbox=options.bbox),feat.properties=properties||{},feat.geometry=geom,feat}function point(coordinates,properties,options){if(void 0===options&&(options={}),!coordinates)throw new Error("coordinates is required");if(!Array.isArray(coordinates))throw new Error("coordinates must be an Array");if(coordinates.length<2)throw new Error("coordinates must be at least 2 numbers long");if(!isNumber(coordinates[0])||!isNumber(coordinates[1]))throw new Error("coordinates must contain numbers");return feature({type:"Point",coordinates:coordinates},properties,options)}function polygon(coordinates,properties,options){void 0===options&&(options={});for(var _i=0,coordinates_1=coordinates;_i<coordinates_1.length;_i++){var ring=coordinates_1[_i];if(ring.length<4)throw new Error("Each LinearRing of a Polygon must have 4 or more Positions.");for(var j=0;j<ring[ring.length-1].length;j++)if(ring[ring.length-1][j]!==ring[0][j])throw new Error("First and last Position are not equivalent.")}return feature({type:"Polygon",coordinates:coordinates},properties,options)}function lineString(coordinates,properties,options){if(void 0===options&&(options={}),coordinates.length<2)throw new Error("coordinates must be an array of two or more positions");return feature({type:"LineString",coordinates:coordinates},properties,options)}function featureCollection(features,options){void 0===options&&(options={});var fc={type:"FeatureCollection"};return options.id&&(fc.id=options.id),options.bbox&&(fc.bbox=options.bbox),fc.features=features,fc}function multiLineString(coordinates,properties,options){return void 0===options&&(options={}),feature({type:"MultiLineString",coordinates:coordinates},properties,options)}function multiPoint(coordinates,properties,options){return void 0===options&&(options={}),feature({type:"MultiPoint",coordinates:coordinates},properties,options)}function multiPolygon(coordinates,properties,options){return void 0===options&&(options={}),feature({type:"MultiPolygon",coordinates:coordinates},properties,options)}function radiansToLength(radians,units){void 0===units&&(units="kilometers");var factor=exports.factors[units];if(!factor)throw new Error(units+" units is invalid");return radians*factor}function lengthToRadians(distance,units){void 0===units&&(units="kilometers");var factor=exports.factors[units];if(!factor)throw new Error(units+" units is invalid");return distance/factor}function radiansToDegrees(radians){return 180*(radians%(2*Math.PI))/Math.PI}function isNumber(num){return!isNaN(num)&&null!==num&&!Array.isArray(num)}Object.defineProperty(exports,"__esModule",{value:!0}),exports.earthRadius=6371008.8,exports.factors={centimeters:100*exports.earthRadius,centimetres:100*exports.earthRadius,degrees:exports.earthRadius/111325,feet:3.28084*exports.earthRadius,inches:39.37*exports.earthRadius,kilometers:exports.earthRadius/1e3,kilometres:exports.earthRadius/1e3,meters:exports.earthRadius,metres:exports.earthRadius,miles:exports.earthRadius/1609.344,millimeters:1e3*exports.earthRadius,millimetres:1e3*exports.earthRadius,nauticalmiles:exports.earthRadius/1852,radians:1,yards:1.0936*exports.earthRadius},exports.unitsFactors={centimeters:100,centimetres:100,degrees:1/111325,feet:3.28084,inches:39.37,kilometers:.001,kilometres:.001,meters:1,metres:1,miles:1/1609.344,millimeters:1e3,millimetres:1e3,nauticalmiles:1/1852,radians:1/exports.earthRadius,yards:1.0936133},exports.areaFactors={acres:247105e-9,centimeters:1e4,centimetres:1e4,feet:10.763910417,hectares:1e-4,inches:1550.003100006,kilometers:1e-6,kilometres:1e-6,meters:1,metres:1,miles:3.86e-7,millimeters:1e6,millimetres:1e6,yards:1.195990046},exports.feature=feature,exports.geometry=function(type,coordinates,_options){switch(void 0===_options&&(_options={}),type){case"Point":return point(coordinates).geometry;case"LineString":return lineString(coordinates).geometry;case"Polygon":return polygon(coordinates).geometry;case"MultiPoint":return multiPoint(coordinates).geometry;case"MultiLineString":return multiLineString(coordinates).geometry;case"MultiPolygon":return multiPolygon(coordinates).geometry;default:throw new Error(type+" is invalid")}},exports.point=point,exports.points=function(coordinates,properties,options){return void 0===options&&(options={}),featureCollection(coordinates.map(function(coords){return point(coords,properties)}),options)},exports.polygon=polygon,exports.polygons=function(coordinates,properties,options){return void 0===options&&(options={}),featureCollection(coordinates.map(function(coords){return polygon(coords,properties)}),options)},exports.lineString=lineString,exports.lineStrings=function(coordinates,properties,options){return void 0===options&&(options={}),featureCollection(coordinates.map(function(coords){return lineString(coords,properties)}),options)},exports.featureCollection=featureCollection,exports.multiLineString=multiLineString,exports.multiPoint=multiPoint,exports.multiPolygon=multiPolygon,exports.geometryCollection=function(geometries,properties,options){return void 0===options&&(options={}),feature({type:"GeometryCollection",geometries:geometries},properties,options)},exports.round=function(num,precision){if(void 0===precision&&(precision=0),precision&&!(precision>=0))throw new Error("precision must be a positive number");var multiplier=Math.pow(10,precision||0);return Math.round(num*multiplier)/multiplier},exports.radiansToLength=radiansToLength,exports.lengthToRadians=lengthToRadians,exports.lengthToDegrees=function(distance,units){return radiansToDegrees(lengthToRadians(distance,units))},exports.bearingToAzimuth=function(bearing){var angle=bearing%360;return angle<0&&(angle+=360),angle},exports.radiansToDegrees=radiansToDegrees,exports.degreesToRadians=function(degrees){return degrees%360*Math.PI/180},exports.convertLength=function(length,originalUnit,finalUnit){if(void 0===originalUnit&&(originalUnit="kilometers"),void 0===finalUnit&&(finalUnit="kilometers"),!(length>=0))throw new Error("length must be a positive number");return radiansToLength(lengthToRadians(length,originalUnit),finalUnit)},exports.convertArea=function(area,originalUnit,finalUnit){if(void 0===originalUnit&&(originalUnit="meters"),void 0===finalUnit&&(finalUnit="kilometers"),!(area>=0))throw new Error("area must be a positive number");var startFactor=exports.areaFactors[originalUnit];if(!startFactor)throw new Error("invalid original units");var finalFactor=exports.areaFactors[finalUnit];if(!finalFactor)throw new Error("invalid final units");return area/startFactor*finalFactor},exports.isNumber=isNumber,exports.isObject=function(input){return!!input&&input.constructor===Object},exports.validateBBox=function(bbox){if(!bbox)throw new Error("bbox is required");if(!Array.isArray(bbox))throw new Error("bbox must be an Array");if(4!==bbox.length&&6!==bbox.length)throw new Error("bbox must be an Array of 4 or 6 numbers");bbox.forEach(function(num){if(!isNumber(num))throw new Error("bbox must only contain numbers")})},exports.validateId=function(id){if(!id)throw new Error("id is required");if(-1===["string","number"].indexOf(typeof id))throw new Error("id must be a number or a string")}},{}],7:[function(require,module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var helpers_1=require("@turf/helpers");exports.getCoord=function(coord){if(!coord)throw new Error("coord is required");if(!Array.isArray(coord)){if("Feature"===coord.type&&null!==coord.geometry&&"Point"===coord.geometry.type)return coord.geometry.coordinates;if("Point"===coord.type)return coord.coordinates}if(Array.isArray(coord)&&coord.length>=2&&!Array.isArray(coord[0])&&!Array.isArray(coord[1]))return coord;throw new Error("coord must be GeoJSON Point or an Array of numbers")},exports.getCoords=function(coords){if(Array.isArray(coords))return coords;if("Feature"===coords.type){if(null!==coords.geometry)return coords.geometry.coordinates}else if(coords.coordinates)return coords.coordinates;throw new Error("coords must be GeoJSON Feature, Geometry Object or an Array")},exports.containsNumber=function containsNumber(coordinates){if(coordinates.length>1&&helpers_1.isNumber(coordinates[0])&&helpers_1.isNumber(coordinates[1]))return!0;if(Array.isArray(coordinates[0])&&coordinates[0].length)return containsNumber(coordinates[0]);throw new Error("coordinates must only contain numbers")},exports.geojsonType=function(value,type,name){if(!type||!name)throw new Error("type and name required");if(!value||value.type!==type)throw new Error("Invalid input to "+name+": must be a "+type+", given "+value.type)},exports.featureOf=function(feature,type,name){if(!feature)throw new Error("No feature passed");if(!name)throw new Error(".featureOf() requires a name");if(!feature||"Feature"!==feature.type||!feature.geometry)throw new Error("Invalid input to "+name+", Feature with geometry required");if(!feature.geometry||feature.geometry.type!==type)throw new Error("Invalid input to "+name+": must be a "+type+", given "+feature.geometry.type)},exports.collectionOf=function(featureCollection,type,name){if(!featureCollection)throw new Error("No featureCollection passed");if(!name)throw new Error(".collectionOf() requires a name");if(!featureCollection||"FeatureCollection"!==featureCollection.type)throw new Error("Invalid input to "+name+", FeatureCollection required");for(var _i=0,_a=featureCollection.features;_i<_a.length;_i++){var feature=_a[_i];if(!feature||"Feature"!==feature.type||!feature.geometry)throw new Error("Invalid input to "+name+", Feature with geometry required");if(!feature.geometry||feature.geometry.type!==type)throw new Error("Invalid input to "+name+": must be a "+type+", given "+feature.geometry.type)}},exports.getGeom=function(geojson){return"Feature"===geojson.type?geojson.geometry:geojson},exports.getType=function(geojson,_name){return"FeatureCollection"===geojson.type?"FeatureCollection":"GeometryCollection"===geojson.type?"GeometryCollection":"Feature"===geojson.type&&null!==geojson.geometry?geojson.geometry.type:geojson.type}},{"@turf/helpers":6}],8:[function(require,module,exports){"use strict";var __importDefault=this&&this.__importDefault||function(mod){return mod&&mod.__esModule?mod:{default:mod}};Object.defineProperty(exports,"__esModule",{value:!0});var helpers_1=require("@turf/helpers"),invariant_1=require("@turf/invariant"),line_segment_1=__importDefault(require("@turf/line-segment")),meta_1=require("@turf/meta"),geojson_rbush_1=__importDefault(require("geojson-rbush"));function intersects(line1,line2){var coords1=invariant_1.getCoords(line1),coords2=invariant_1.getCoords(line2);if(2!==coords1.length)throw new Error("<intersects> line1 must only contain 2 coordinates");if(2!==coords2.length)throw new Error("<intersects> line2 must only contain 2 coordinates");var x1=coords1[0][0],y1=coords1[0][1],x2=coords1[1][0],y2=coords1[1][1],x3=coords2[0][0],y3=coords2[0][1],x4=coords2[1][0],y4=coords2[1][1],denom=(y4-y3)*(x2-x1)-(x4-x3)*(y2-y1),numeA=(x4-x3)*(y1-y3)-(y4-y3)*(x1-x3),numeB=(x2-x1)*(y1-y3)-(y2-y1)*(x1-x3);if(0===denom)return null;var uA=numeA/denom,uB=numeB/denom;if(uA>=0&&uA<=1&&uB>=0&&uB<=1){var x=x1+uA*(x2-x1),y=y1+uA*(y2-y1);return helpers_1.point([x,y])}return null}exports.default=function(line1,line2){var unique={},results=[];if("LineString"===line1.type&&(line1=helpers_1.feature(line1)),"LineString"===line2.type&&(line2=helpers_1.feature(line2)),"Feature"===line1.type&&"Feature"===line2.type&&null!==line1.geometry&&null!==line2.geometry&&"LineString"===line1.geometry.type&&"LineString"===line2.geometry.type&&2===line1.geometry.coordinates.length&&2===line2.geometry.coordinates.length){var intersect=intersects(line1,line2);return intersect&&results.push(intersect),helpers_1.featureCollection(results)}var tree=geojson_rbush_1.default();return tree.load(line_segment_1.default(line2)),meta_1.featureEach(line_segment_1.default(line1),function(segment){meta_1.featureEach(tree.search(segment),function(match){var intersect=intersects(segment,match);if(intersect){var key=invariant_1.getCoords(intersect).join(",");unique[key]||(unique[key]=!0,results.push(intersect))}})}),helpers_1.featureCollection(results)}},{"@turf/helpers":6,"@turf/invariant":7,"@turf/line-segment":9,"@turf/meta":10,"geojson-rbush":18}],9:[function(require,module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var helpers_1=require("@turf/helpers"),invariant_1=require("@turf/invariant"),meta_1=require("@turf/meta");exports.default=function(geojson){if(!geojson)throw new Error("geojson is required");var results=[];return meta_1.flattenEach(geojson,function(feature){!function(geojson,results){var coords=[],geometry=geojson.geometry;if(null!==geometry){switch(geometry.type){case"Polygon":coords=invariant_1.getCoords(geometry);break;case"LineString":coords=[invariant_1.getCoords(geometry)]}coords.forEach(function(coord){var segments=function(coords,properties){var segments=[];return coords.reduce(function(previousCoords,currentCoords){var coords1,coords2,x1,y1,x2,y2,segment=helpers_1.lineString([previousCoords,currentCoords],properties);return segment.bbox=(coords2=currentCoords,x1=(coords1=previousCoords)[0],y1=coords1[1],x2=coords2[0],y2=coords2[1],[x1<x2?x1:x2,y1<y2?y1:y2,x1>x2?x1:x2,y1>y2?y1:y2]),segments.push(segment),currentCoords}),segments}(coord,geojson.properties);segments.forEach(function(segment){segment.id=results.length,results.push(segment)})})}}(feature,results)}),helpers_1.featureCollection(results)}},{"@turf/helpers":6,"@turf/invariant":7,"@turf/meta":10}],10:[function(require,module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var helpers=require("@turf/helpers");function coordEach(geojson,callback,excludeWrapCoord){if(null!==geojson)for(var j,k,l,geometry,stopG,coords,geometryMaybeCollection,isGeometryCollection,wrapShrink=0,coordIndex=0,type=geojson.type,isFeatureCollection="FeatureCollection"===type,isFeature="Feature"===type,stop=isFeatureCollection?geojson.features.length:1,featureIndex=0;featureIndex<stop;featureIndex++){stopG=(isGeometryCollection=!!(geometryMaybeCollection=isFeatureCollection?geojson.features[featureIndex].geometry:isFeature?geojson.geometry:geojson)&&"GeometryCollection"===geometryMaybeCollection.type)?geometryMaybeCollection.geometries.length:1;for(var geomIndex=0;geomIndex<stopG;geomIndex++){var multiFeatureIndex=0,geometryIndex=0;if(null!==(geometry=isGeometryCollection?geometryMaybeCollection.geometries[geomIndex]:geometryMaybeCollection)){coords=geometry.coordinates;var geomType=geometry.type;switch(wrapShrink=!excludeWrapCoord||"Polygon"!==geomType&&"MultiPolygon"!==geomType?0:1,geomType){case null:break;case"Point":if(!1===callback(coords,coordIndex,featureIndex,multiFeatureIndex,geometryIndex))return!1;coordIndex++,multiFeatureIndex++;break;case"LineString":case"MultiPoint":for(j=0;j<coords.length;j++){if(!1===callback(coords[j],coordIndex,featureIndex,multiFeatureIndex,geometryIndex))return!1;coordIndex++,"MultiPoint"===geomType&&multiFeatureIndex++}"LineString"===geomType&&multiFeatureIndex++;break;case"Polygon":case"MultiLineString":for(j=0;j<coords.length;j++){for(k=0;k<coords[j].length-wrapShrink;k++){if(!1===callback(coords[j][k],coordIndex,featureIndex,multiFeatureIndex,geometryIndex))return!1;coordIndex++}"MultiLineString"===geomType&&multiFeatureIndex++,"Polygon"===geomType&&geometryIndex++}"Polygon"===geomType&&multiFeatureIndex++;break;case"MultiPolygon":for(j=0;j<coords.length;j++){for(geometryIndex=0,k=0;k<coords[j].length;k++){for(l=0;l<coords[j][k].length-wrapShrink;l++){if(!1===callback(coords[j][k][l],coordIndex,featureIndex,multiFeatureIndex,geometryIndex))return!1;coordIndex++}geometryIndex++}multiFeatureIndex++}break;case"GeometryCollection":for(j=0;j<geometry.geometries.length;j++)if(!1===coordEach(geometry.geometries[j],callback,excludeWrapCoord))return!1;break;default:throw new Error("Unknown Geometry Type")}}}}}function propEach(geojson,callback){var i;switch(geojson.type){case"FeatureCollection":for(i=0;i<geojson.features.length&&!1!==callback(geojson.features[i].properties,i);i++);break;case"Feature":callback(geojson.properties,0)}}function featureEach(geojson,callback){if("Feature"===geojson.type)callback(geojson,0);else if("FeatureCollection"===geojson.type)for(var i=0;i<geojson.features.length&&!1!==callback(geojson.features[i],i);i++);}function geomEach(geojson,callback){var i,j,g,geometry,stopG,geometryMaybeCollection,isGeometryCollection,featureProperties,featureBBox,featureId,featureIndex=0,isFeatureCollection="FeatureCollection"===geojson.type,isFeature="Feature"===geojson.type,stop=isFeatureCollection?geojson.features.length:1;for(i=0;i<stop;i++){for(geometryMaybeCollection=isFeatureCollection?geojson.features[i].geometry:isFeature?geojson.geometry:geojson,featureProperties=isFeatureCollection?geojson.features[i].properties:isFeature?geojson.properties:{},featureBBox=isFeatureCollection?geojson.features[i].bbox:isFeature?geojson.bbox:void 0,featureId=isFeatureCollection?geojson.features[i].id:isFeature?geojson.id:void 0,stopG=(isGeometryCollection=!!geometryMaybeCollection&&"GeometryCollection"===geometryMaybeCollection.type)?geometryMaybeCollection.geometries.length:1,g=0;g<stopG;g++)if(null!==(geometry=isGeometryCollection?geometryMaybeCollection.geometries[g]:geometryMaybeCollection))switch(geometry.type){case"Point":case"LineString":case"MultiPoint":case"Polygon":case"MultiLineString":case"MultiPolygon":if(!1===callback(geometry,featureIndex,featureProperties,featureBBox,featureId))return!1;break;case"GeometryCollection":for(j=0;j<geometry.geometries.length;j++)if(!1===callback(geometry.geometries[j],featureIndex,featureProperties,featureBBox,featureId))return!1;break;default:throw new Error("Unknown Geometry Type")}else if(!1===callback(null,featureIndex,featureProperties,featureBBox,featureId))return!1;featureIndex++}}function flattenEach(geojson,callback){geomEach(geojson,function(geometry,featureIndex,properties,bbox,id){var geomType,type=null===geometry?null:geometry.type;switch(type){case null:case"Point":case"LineString":case"Polygon":return!1!==callback(helpers.feature(geometry,properties,{bbox:bbox,id:id}),featureIndex,0)&&void 0}switch(type){case"MultiPoint":geomType="Point";break;case"MultiLineString":geomType="LineString";break;case"MultiPolygon":geomType="Polygon"}for(var multiFeatureIndex=0;multiFeatureIndex<geometry.coordinates.length;multiFeatureIndex++){var geom={type:geomType,coordinates:geometry.coordinates[multiFeatureIndex]};if(!1===callback(helpers.feature(geom,properties),featureIndex,multiFeatureIndex))return!1}})}function segmentEach(geojson,callback){flattenEach(geojson,function(feature,featureIndex,multiFeatureIndex){var segmentIndex=0;if(feature.geometry){var type=feature.geometry.type;if("Point"!==type&&"MultiPoint"!==type){var previousCoords,previousFeatureIndex=0,previousMultiIndex=0,prevGeomIndex=0;return!1!==coordEach(feature,function(currentCoord,coordIndex,featureIndexCoord,multiPartIndexCoord,geometryIndex){if(void 0===previousCoords||featureIndex>previousFeatureIndex||multiPartIndexCoord>previousMultiIndex||geometryIndex>prevGeomIndex)return previousCoords=currentCoord,previousFeatureIndex=featureIndex,previousMultiIndex=multiPartIndexCoord,prevGeomIndex=geometryIndex,void(segmentIndex=0);var currentSegment=helpers.lineString([previousCoords,currentCoord],feature.properties);if(!1===callback(currentSegment,featureIndex,multiFeatureIndex,geometryIndex,segmentIndex))return!1;segmentIndex++,previousCoords=currentCoord})&&void 0}}})}function lineEach(geojson,callback){if(!geojson)throw new Error("geojson is required");flattenEach(geojson,function(feature,featureIndex,multiFeatureIndex){if(null!==feature.geometry){var type=feature.geometry.type,coords=feature.geometry.coordinates;switch(type){case"LineString":if(!1===callback(feature,featureIndex,multiFeatureIndex,0,0))return!1;break;case"Polygon":for(var geometryIndex=0;geometryIndex<coords.length;geometryIndex++)if(!1===callback(helpers.lineString(coords[geometryIndex],feature.properties),featureIndex,multiFeatureIndex,geometryIndex))return!1}}})}exports.coordAll=function(geojson){var coords=[];return coordEach(geojson,function(coord){coords.push(coord)}),coords},exports.coordEach=coordEach,exports.coordReduce=function(geojson,callback,initialValue,excludeWrapCoord){var previousValue=initialValue;return coordEach(geojson,function(currentCoord,coordIndex,featureIndex,multiFeatureIndex,geometryIndex){previousValue=0===coordIndex&&void 0===initialValue?currentCoord:callback(previousValue,currentCoord,coordIndex,featureIndex,multiFeatureIndex,geometryIndex)},excludeWrapCoord),previousValue},exports.featureEach=featureEach,exports.featureReduce=function(geojson,callback,initialValue){var previousValue=initialValue;return featureEach(geojson,function(currentFeature,featureIndex){previousValue=0===featureIndex&&void 0===initialValue?currentFeature:callback(previousValue,currentFeature,featureIndex)}),previousValue},exports.findPoint=function(geojson,options){if(options=options||{},!helpers.isObject(options))throw new Error("options is invalid");var geometry,featureIndex=options.featureIndex||0,multiFeatureIndex=options.multiFeatureIndex||0,geometryIndex=options.geometryIndex||0,coordIndex=options.coordIndex||0,properties=options.properties;switch(geojson.type){case"FeatureCollection":featureIndex<0&&(featureIndex=geojson.features.length+featureIndex),properties=properties||geojson.features[featureIndex].properties,geometry=geojson.features[featureIndex].geometry;break;case"Feature":properties=properties||geojson.properties,geometry=geojson.geometry;break;case"Point":case"MultiPoint":return null;case"LineString":case"Polygon":case"MultiLineString":case"MultiPolygon":geometry=geojson;break;default:throw new Error("geojson is invalid")}if(null===geometry)return null;var coords=geometry.coordinates;switch(geometry.type){case"Point":return helpers.point(coords,properties,options);case"MultiPoint":return multiFeatureIndex<0&&(multiFeatureIndex=coords.length+multiFeatureIndex),helpers.point(coords[multiFeatureIndex],properties,options);case"LineString":return coordIndex<0&&(coordIndex=coords.length+coordIndex),helpers.point(coords[coordIndex],properties,options);case"Polygon":return geometryIndex<0&&(geometryIndex=coords.length+geometryIndex),coordIndex<0&&(coordIndex=coords[geometryIndex].length+coordIndex),helpers.point(coords[geometryIndex][coordIndex],properties,options);case"MultiLineString":return multiFeatureIndex<0&&(multiFeatureIndex=coords.length+multiFeatureIndex),coordIndex<0&&(coordIndex=coords[multiFeatureIndex].length+coordIndex),helpers.point(coords[multiFeatureIndex][coordIndex],properties,options);case"MultiPolygon":return multiFeatureIndex<0&&(multiFeatureIndex=coords.length+multiFeatureIndex),geometryIndex<0&&(geometryIndex=coords[multiFeatureIndex].length+geometryIndex),coordIndex<0&&(coordIndex=coords[multiFeatureIndex][geometryIndex].length-coordIndex),helpers.point(coords[multiFeatureIndex][geometryIndex][coordIndex],properties,options)}throw new Error("geojson is invalid")},exports.findSegment=function(geojson,options){if(options=options||{},!helpers.isObject(options))throw new Error("options is invalid");var geometry,featureIndex=options.featureIndex||0,multiFeatureIndex=options.multiFeatureIndex||0,geometryIndex=options.geometryIndex||0,segmentIndex=options.segmentIndex||0,properties=options.properties;switch(geojson.type){case"FeatureCollection":featureIndex<0&&(featureIndex=geojson.features.length+featureIndex),properties=properties||geojson.features[featureIndex].properties,geometry=geojson.features[featureIndex].geometry;break;case"Feature":properties=properties||geojson.properties,geometry=geojson.geometry;break;case"Point":case"MultiPoint":return null;case"LineString":case"Polygon":case"MultiLineString":case"MultiPolygon":geometry=geojson;break;default:throw new Error("geojson is invalid")}if(null===geometry)return null;var coords=geometry.coordinates;switch(geometry.type){case"Point":case"MultiPoint":return null;case"LineString":return segmentIndex<0&&(segmentIndex=coords.length+segmentIndex-1),helpers.lineString([coords[segmentIndex],coords[segmentIndex+1]],properties,options);case"Polygon":return geometryIndex<0&&(geometryIndex=coords.length+geometryIndex),segmentIndex<0&&(segmentIndex=coords[geometryIndex].length+segmentIndex-1),helpers.lineString([coords[geometryIndex][segmentIndex],coords[geometryIndex][segmentIndex+1]],properties,options);case"MultiLineString":return multiFeatureIndex<0&&(multiFeatureIndex=coords.length+multiFeatureIndex),segmentIndex<0&&(segmentIndex=coords[multiFeatureIndex].length+segmentIndex-1),helpers.lineString([coords[multiFeatureIndex][segmentIndex],coords[multiFeatureIndex][segmentIndex+1]],properties,options);case"MultiPolygon":return multiFeatureIndex<0&&(multiFeatureIndex=coords.length+multiFeatureIndex),geometryIndex<0&&(geometryIndex=coords[multiFeatureIndex].length+geometryIndex),segmentIndex<0&&(segmentIndex=coords[multiFeatureIndex][geometryIndex].length-segmentIndex-1),helpers.lineString([coords[multiFeatureIndex][geometryIndex][segmentIndex],coords[multiFeatureIndex][geometryIndex][segmentIndex+1]],properties,options)}throw new Error("geojson is invalid")},exports.flattenEach=flattenEach,exports.flattenReduce=function(geojson,callback,initialValue){var previousValue=initialValue;return flattenEach(geojson,function(currentFeature,featureIndex,multiFeatureIndex){previousValue=0===featureIndex&&0===multiFeatureIndex&&void 0===initialValue?currentFeature:callback(previousValue,currentFeature,featureIndex,multiFeatureIndex)}),previousValue},exports.geomEach=geomEach,exports.geomReduce=function(geojson,callback,initialValue){var previousValue=initialValue;return geomEach(geojson,function(currentGeometry,featureIndex,featureProperties,featureBBox,featureId){previousValue=0===featureIndex&&void 0===initialValue?currentGeometry:callback(previousValue,currentGeometry,featureIndex,featureProperties,featureBBox,featureId)}),previousValue},exports.lineEach=lineEach,exports.lineReduce=function(geojson,callback,initialValue){var previousValue=initialValue;return lineEach(geojson,function(currentLine,featureIndex,multiFeatureIndex,geometryIndex){previousValue=0===featureIndex&&void 0===initialValue?currentLine:callback(previousValue,currentLine,featureIndex,multiFeatureIndex,geometryIndex)}),previousValue},exports.propEach=propEach,exports.propReduce=function(geojson,callback,initialValue){var previousValue=initialValue;return propEach(geojson,function(currentProperties,featureIndex){previousValue=0===featureIndex&&void 0===initialValue?currentProperties:callback(previousValue,currentProperties,featureIndex)}),previousValue},exports.segmentEach=segmentEach,exports.segmentReduce=function(geojson,callback,initialValue){var previousValue=initialValue,started=!1;return segmentEach(geojson,function(currentSegment,featureIndex,multiFeatureIndex,geometryIndex,segmentIndex){previousValue=!1===started&&void 0===initialValue?currentSegment:callback(previousValue,currentSegment,featureIndex,multiFeatureIndex,geometryIndex,segmentIndex),started=!0}),previousValue}},{"@turf/helpers":6}],11:[function(require,module,exports){"use strict";var __importDefault=this&&this.__importDefault||function(mod){return mod&&mod.__esModule?mod:{default:mod}};Object.defineProperty(exports,"__esModule",{value:!0});var bearing_1=__importDefault(require("@turf/bearing")),distance_1=__importDefault(require("@turf/distance")),destination_1=__importDefault(require("@turf/destination")),line_intersect_1=__importDefault(require("@turf/line-intersect")),meta_1=require("@turf/meta"),helpers_1=require("@turf/helpers"),invariant_1=require("@turf/invariant");exports.default=function(lines,pt,options){void 0===options&&(options={});var closestPt=helpers_1.point([1/0,1/0],{dist:1/0}),length=0;return meta_1.flattenEach(lines,function(line){for(var coords=invariant_1.getCoords(line),i=0;i<coords.length-1;i++){var start=helpers_1.point(coords[i]);start.properties.dist=distance_1.default(pt,start,options);var stop_1=helpers_1.point(coords[i+1]);stop_1.properties.dist=distance_1.default(pt,stop_1,options);var sectionLength=distance_1.default(start,stop_1,options),heightDistance=Math.max(start.properties.dist,stop_1.properties.dist),direction=bearing_1.default(start,stop_1),perpendicularPt1=destination_1.default(pt,heightDistance,direction+90,options),perpendicularPt2=destination_1.default(pt,heightDistance,direction-90,options),intersect=line_intersect_1.default(helpers_1.lineString([perpendicularPt1.geometry.coordinates,perpendicularPt2.geometry.coordinates]),helpers_1.lineString([start.geometry.coordinates,stop_1.geometry.coordinates])),intersectPt=null;intersect.features.length>0&&((intersectPt=intersect.features[0]).properties.dist=distance_1.default(pt,intersectPt,options),intersectPt.properties.location=length+distance_1.default(start,intersectPt,options)),start.properties.dist<closestPt.properties.dist&&((closestPt=start).properties.index=i,closestPt.properties.location=length),stop_1.properties.dist<closestPt.properties.dist&&((closestPt=stop_1).properties.index=i+1,closestPt.properties.location=length+sectionLength),intersectPt&&intersectPt.properties.dist<closestPt.properties.dist&&((closestPt=intersectPt).properties.index=i),length+=sectionLength}}),closestPt}},{"@turf/bearing":2,"@turf/destination":3,"@turf/distance":4,"@turf/helpers":6,"@turf/invariant":7,"@turf/line-intersect":8,"@turf/meta":10}],12:[function(require,module,exports){"use strict";function compactNode(k,vertices,ends,vertexCoords,edgeData,trackIncoming,options){options=options||{};var neighbors=vertices[k];return Object.keys(neighbors).reduce(function(result,j){var neighbor=function(prev,v,vertices,ends,vertexCoords,edgeData,trackIncoming,options){var weight=vertices[prev][v],reverseWeight=vertices[v][prev],coordinates=[],path=[],reducedEdge=options.edgeDataSeed;for(options.edgeDataReduceFn&&(reducedEdge=options.edgeDataReduceFn(reducedEdge,edgeData[v][prev]));!ends[v];){var edges=vertices[v];if(!edges)break;var next=Object.keys(edges).filter(function(k){return k!==prev})[0];if(weight+=edges[next],trackIncoming){if(reverseWeight+=vertices[next][v],path.indexOf(v)>=0){ends[v]=vertices[v];break}path.push(v)}options.edgeDataReduceFn&&(reducedEdge=options.edgeDataReduceFn(reducedEdge,edgeData[v][next])),coordinates.push(vertexCoords[v]),prev=v,v=next}return{vertex:v,weight:weight,reverseWeight:reverseWeight,coordinates:coordinates,reducedEdge:reducedEdge}}(k,j,vertices,ends,vertexCoords,edgeData,trackIncoming,options),weight=neighbor.weight,reverseWeight=neighbor.reverseWeight;if(neighbor.vertex!==k&&((!result.edges[neighbor.vertex]||result.edges[neighbor.vertex]>weight)&&(result.edges[neighbor.vertex]=weight,result.coordinates[neighbor.vertex]=[vertexCoords[k]].concat(neighbor.coordinates),result.reducedEdges[neighbor.vertex]=neighbor.reducedEdge),trackIncoming&&!isNaN(reverseWeight)&&(!result.incomingEdges[neighbor.vertex]||result.incomingEdges[neighbor.vertex]>reverseWeight))){result.incomingEdges[neighbor.vertex]=reverseWeight;var coordinates=[vertexCoords[k]].concat(neighbor.coordinates);coordinates.reverse(),result.incomingCoordinates[neighbor.vertex]=coordinates}return result},{edges:{},incomingEdges:{},coordinates:{},incomingCoordinates:{},reducedEdges:{}})}module.exports={compactNode:compactNode,compactGraph:function(vertices,vertexCoords,edgeData,options){var progress=(options=options||{}).progress,ends=Object.keys(vertices).reduce(function(es,k,i,vs){var remove,vertex=vertices[k],edges=Object.keys(vertex),numberEdges=edges.length;if(void 0===options.compact||options.compact)if(1===numberEdges){var other=vertices[edges[0]];remove=!other[k]}else remove=2===numberEdges&&edges.filter(function(n){return vertices[n][k]}).length===numberEdges;else remove=!1;return remove||(es[k]=vertex),i%1e3==0&&progress&&progress("compact:ends",i,vs.length),es},{});return Object.keys(ends).reduce(function(result,k,i,es){var compacted=compactNode(k,vertices,ends,vertexCoords,edgeData,!1,options);return result.graph[k]=compacted.edges,result.coordinates[k]=compacted.coordinates,options.edgeDataReduceFn&&(result.reducedEdges[k]=compacted.reducedEdges),i%1e3==0&&progress&&progress("compact:nodes",i,es.length),result},{graph:{},coordinates:{},reducedEdges:{}})}}},{}],13:[function(require,module,exports){var Queue=require("tinyqueue");module.exports=function(graph,start,end){var costs={};costs[start]=0;for(var queue=new Queue([[0,[start],start]],function(a,b){return a[0]-b[0]});queue.length;){var state=queue.pop(),cost=state[0],node=state[2];if(node===end)return state.slice(0,2);var neighbours=graph[node];Object.keys(neighbours).forEach(function(n){var newCost=cost+neighbours[n];if(!(n in costs)||newCost<costs[n]){costs[n]=newCost;var newState=[newCost,state[1].concat([n]),n];queue.push(newState)}})}return null}},{tinyqueue:20}],14:[function(require,module,exports){"use strict";var findPath=require("./dijkstra"),preprocess=require("./preprocessor"),compactor=require("./compactor"),roundCoord=require("./round-coord");function PathFinder(graph,options){if(options=options||{},graph.compactedVertices||(graph=preprocess(graph,options)),this._graph=graph,this._keyFn=options.keyFn||function(c){return c.join(",")},this._precision=options.precision||1e-5,this._options=options,0===Object.keys(this._graph.compactedVertices).filter(function(k){return"edgeData"!==k}).length)throw new Error("Compacted graph contains no forks (topology has no intersections).")}module.exports=PathFinder,PathFinder.prototype={findPath:function(a,b){var start=this._keyFn(roundCoord(a.geometry.coordinates,this._precision)),finish=this._keyFn(roundCoord(b.geometry.coordinates,this._precision));if(!this._graph.vertices[start]||!this._graph.vertices[finish])return null;this._createPhantom(start),this._createPhantom(finish);var path=findPath(this._graph.compactedVertices,start,finish);if(path){var weight=path[0];return{path:(path=path[1]).reduce(function(cs,v,i,vs){return i>0&&(cs=cs.concat(this._graph.compactedCoordinates[vs[i-1]][v])),cs}.bind(this),[]).concat([this._graph.sourceVertices[finish]]),weight:weight,edgeDatas:this._graph.compactedEdges?path.reduce(function(eds,v,i,vs){return i>0&&eds.push({reducedEdge:this._graph.compactedEdges[vs[i-1]][v]}),eds}.bind(this),[]):void 0}}return null},serialize:function(){return this._graph},_createPhantom:function(n){if(this._graph.compactedVertices[n])return null;var phantom=compactor.compactNode(n,this._graph.vertices,this._graph.compactedVertices,this._graph.sourceVertices,this._graph.edgeData,!0,this._options);return this._graph.compactedVertices[n]=phantom.edges,this._graph.compactedCoordinates[n]=phantom.coordinates,this._graph.compactedEdges&&(this._graph.compactedEdges[n]=phantom.reducedEdges),Object.keys(phantom.incomingEdges).forEach(function(neighbor){this._graph.compactedVertices[neighbor][n]=phantom.incomingEdges[neighbor],this._graph.compactedCoordinates[neighbor][n]=[this._graph.sourceVertices[neighbor]].concat(phantom.incomingCoordinates[neighbor].slice(0,-1)),this._graph.compactedEdges&&(this._graph.compactedEdges[neighbor][n]=phantom.reducedEdges[neighbor])}.bind(this)),n},_removePhantom:function(n){n&&(Object.keys(this._graph.compactedVertices[n]).forEach(function(neighbor){delete this._graph.compactedVertices[neighbor][n]}.bind(this)),Object.keys(this._graph.compactedCoordinates[n]).forEach(function(neighbor){delete this._graph.compactedCoordinates[neighbor][n]}.bind(this)),this._graph.compactedEdges&&Object.keys(this._graph.compactedEdges[n]).forEach(function(neighbor){delete this._graph.compactedEdges[neighbor][n]}.bind(this)),delete this._graph.compactedVertices[n],delete this._graph.compactedCoordinates[n],this._graph.compactedEdges&&delete this._graph.compactedEdges[n])}}},{"./compactor":12,"./dijkstra":13,"./preprocessor":15,"./round-coord":16}],15:[function(require,module,exports){"use strict";var topology=require("./topology"),compactor=require("./compactor"),distance=require("@turf/distance").default,{point:point}=require("@turf/helpers");module.exports=function(graph,options){var topo,weightFn=(options=options||{}).weightFn||function(a,b){return distance(point(a),point(b))};"FeatureCollection"===graph.type?topo=topology(graph,options):graph.edges&&(topo=graph);graph=topo.edges.reduce(function(g,edge,i,es){var a=edge[0],b=edge[1],props=edge[2],w=weightFn(topo.vertices[a],topo.vertices[b],props),makeEdgeList=function(node){g.vertices[node]||(g.vertices[node]={},options.edgeDataReduceFn&&(g.edgeData[node]={}))},concatEdge=function(startNode,endNode,weight){g.vertices[startNode][endNode]=weight,options.edgeDataReduceFn&&(g.edgeData[startNode][endNode]=options.edgeDataReduceFn(options.edgeDataSeed,props))};return w&&(makeEdgeList(a),makeEdgeList(b),w instanceof Object?(w.forward&&concatEdge(a,b,w.forward),w.backward&&concatEdge(b,a,w.backward)):(concatEdge(a,b,w),concatEdge(b,a,w))),i%1e3==0&&options.progress&&options.progress("edgeweights",i,es.length),g},{edgeData:{},vertices:{}});var compact=compactor.compactGraph(graph.vertices,topo.vertices,graph.edgeData,options);return{vertices:graph.vertices,edgeData:graph.edgeData,sourceVertices:topo.vertices,compactedVertices:compact.graph,compactedCoordinates:compact.coordinates,compactedEdges:options.edgeDataReduceFn?compact.reducedEdges:null}}},{"./compactor":12,"./topology":17,"@turf/distance":4,"@turf/helpers":6}],16:[function(require,module,exports){module.exports=function(c,precision){return[Math.round(c[0]/precision)*precision,Math.round(c[1]/precision)*precision]}},{}],17:[function(require,module,exports){"use strict";var explode=require("@turf/explode"),roundCoord=require("./round-coord");function isLineString(f){return"LineString"===f.geometry.type}module.exports=function(geojson,options){var keyFn=(options=options||{}).keyFn||function(c){return c.join(",")},precision=options.precision||1e-5,lineStrings=function(geojson,fn){var features=[];"FeatureCollection"===geojson.type&&(features=features.concat(geojson.features.filter(fn)));return{type:"FeatureCollection",features:features}}(geojson,isLineString),vertices=explode(lineStrings).features.reduce(function(cs,f,i,fs){var rc=roundCoord(f.geometry.coordinates,precision);return cs[keyFn(rc)]=f.geometry.coordinates,i%1e3==0&&options.progress&&options.progress("topo:vertices",i,fs.length),cs},{}),edges=function geoJsonReduce(geojson,fn,seed){return"FeatureCollection"===geojson.type?geojson.features.reduce(function(a,f){return geoJsonReduce(f,fn,a)},seed):fn(seed,geojson)}(lineStrings,function(es,f,i,fs){return f.geometry.coordinates.forEach(function(c,i,cs){if(i>0){var k1=keyFn(roundCoord(cs[i-1],precision)),k2=keyFn(roundCoord(c,precision));es.push([k1,k2,f.properties])}}),i%1e3==0&&options.progress&&options.progress("topo:edges",i,fs.length),es},[]);return{vertices:vertices,edges:edges}}},{"./round-coord":16,"@turf/explode":5}],18:[function(require,module,exports){var rbush=require("rbush"),helpers=require("@turf/helpers"),meta=require("@turf/meta"),turfBBox=require("@turf/bbox").default,featureEach=meta.featureEach,featureCollection=(meta.coordEach,helpers.polygon,helpers.featureCollection);function geojsonRbush(maxEntries){var tree=new rbush(maxEntries);return tree.insert=function(feature){if("Feature"!==feature.type)throw new Error("invalid feature");return feature.bbox=feature.bbox?feature.bbox:turfBBox(feature),rbush.prototype.insert.call(this,feature)},tree.load=function(features){var load=[];return Array.isArray(features)?features.forEach(function(feature){if("Feature"!==feature.type)throw new Error("invalid features");feature.bbox=feature.bbox?feature.bbox:turfBBox(feature),load.push(feature)}):featureEach(features,function(feature){if("Feature"!==feature.type)throw new Error("invalid features");feature.bbox=feature.bbox?feature.bbox:turfBBox(feature),load.push(feature)}),rbush.prototype.load.call(this,load)},tree.remove=function(feature,equals){if("Feature"!==feature.type)throw new Error("invalid feature");return feature.bbox=feature.bbox?feature.bbox:turfBBox(feature),rbush.prototype.remove.call(this,feature,equals)},tree.clear=function(){return rbush.prototype.clear.call(this)},tree.search=function(geojson){var features=rbush.prototype.search.call(this,this.toBBox(geojson));return featureCollection(features)},tree.collides=function(geojson){return rbush.prototype.collides.call(this,this.toBBox(geojson))},tree.all=function(){var features=rbush.prototype.all.call(this);return featureCollection(features)},tree.toJSON=function(){return rbush.prototype.toJSON.call(this)},tree.fromJSON=function(json){return rbush.prototype.fromJSON.call(this,json)},tree.toBBox=function(geojson){var bbox;if(geojson.bbox)bbox=geojson.bbox;else if(Array.isArray(geojson)&&4===geojson.length)bbox=geojson;else if(Array.isArray(geojson)&&6===geojson.length)bbox=[geojson[0],geojson[1],geojson[3],geojson[4]];else if("Feature"===geojson.type)bbox=turfBBox(geojson);else{if("FeatureCollection"!==geojson.type)throw new Error("invalid geojson");bbox=turfBBox(geojson)}return{minX:bbox[0],minY:bbox[1],maxX:bbox[2],maxY:bbox[3]}},tree}module.exports=geojsonRbush,module.exports.default=geojsonRbush},{"@turf/bbox":1,"@turf/helpers":6,"@turf/meta":10,rbush:19}],19:[function(require,module,exports){var t,i;t=this,i=function(){"use strict";function t(t,r,e,a,h){!function t(n,r,e,a,h){for(;a>e;){if(a-e>600){var o=a-e+1,s=r-e+1,l=Math.log(o),f=.5*Math.exp(2*l/3),u=.5*Math.sqrt(l*f*(o-f)/o)*(s-o/2<0?-1:1);t(n,r,Math.max(e,Math.floor(r-s*f/o+u)),Math.min(a,Math.floor(r+(o-s)*f/o+u)),h)}var p=n[r],d=e,x=a;for(i(n,e,r),h(n[a],p)>0&&i(n,e,a);d<x;){for(i(n,d,x),d++,x--;h(n[d],p)<0;)d++;for(;h(n[x],p)>0;)x--}0===h(n[e],p)?i(n,e,x):i(n,++x,a),x<=r&&(e=x+1),r<=x&&(a=x-1)}}(t,r,e||0,a||t.length-1,h||n)}function i(t,i,n){var r=t[i];t[i]=t[n],t[n]=r}function n(t,i){return t<i?-1:t>i?1:0}var r=function(t){void 0===t&&(t=9),this._maxEntries=Math.max(4,t),this._minEntries=Math.max(2,Math.ceil(.4*this._maxEntries)),this.clear()};function e(t,i,n){if(!n)return i.indexOf(t);for(var r=0;r<i.length;r++)if(n(t,i[r]))return r;return-1}function a(t,i){h(t,0,t.children.length,i,t)}function h(t,i,n,r,e){e||(e=p(null)),e.minX=1/0,e.minY=1/0,e.maxX=-1/0,e.maxY=-1/0;for(var a=i;a<n;a++){var h=t.children[a];o(e,t.leaf?r(h):h)}return e}function o(t,i){return t.minX=Math.min(t.minX,i.minX),t.minY=Math.min(t.minY,i.minY),t.maxX=Math.max(t.maxX,i.maxX),t.maxY=Math.max(t.maxY,i.maxY),t}function s(t,i){return t.minX-i.minX}function l(t,i){return t.minY-i.minY}function f(t){return(t.maxX-t.minX)*(t.maxY-t.minY)}function u(t){return t.maxX-t.minX+(t.maxY-t.minY)}function m(t,i){return t.minX<=i.minX&&t.minY<=i.minY&&i.maxX<=t.maxX&&i.maxY<=t.maxY}function c(t,i){return i.minX<=t.maxX&&i.minY<=t.maxY&&i.maxX>=t.minX&&i.maxY>=t.minY}function p(t){return{children:t,height:1,leaf:!0,minX:1/0,minY:1/0,maxX:-1/0,maxY:-1/0}}function d(i,n,r,e,a){for(var h=[n,r];h.length;)if(!((r=h.pop())-(n=h.pop())<=e)){var o=n+Math.ceil((r-n)/e/2)*e;t(i,o,n,r,a),h.push(n,o,o,r)}}return r.prototype.all=function(){return this._all(this.data,[])},r.prototype.search=function(t){var i=this.data,n=[];if(!c(t,i))return n;for(var r=this.toBBox,e=[];i;){for(var a=0;a<i.children.length;a++){var h=i.children[a],o=i.leaf?r(h):h;c(t,o)&&(i.leaf?n.push(h):m(t,o)?this._all(h,n):e.push(h))}i=e.pop()}return n},r.prototype.collides=function(t){var i=this.data;if(!c(t,i))return!1;for(var n=[];i;){for(var r=0;r<i.children.length;r++){var e=i.children[r],a=i.leaf?this.toBBox(e):e;if(c(t,a)){if(i.leaf||m(t,a))return!0;n.push(e)}}i=n.pop()}return!1},r.prototype.load=function(t){if(!t||!t.length)return this;if(t.length<this._minEntries){for(var i=0;i<t.length;i++)this.insert(t[i]);return this}var n=this._build(t.slice(),0,t.length-1,0);if(this.data.children.length)if(this.data.height===n.height)this._splitRoot(this.data,n);else{if(this.data.height<n.height){var r=this.data;this.data=n,n=r}this._insert(n,this.data.height-n.height-1,!0)}else this.data=n;return this},r.prototype.insert=function(t){return t&&this._insert(t,this.data.height-1),this},r.prototype.clear=function(){return this.data=p([]),this},r.prototype.remove=function(t,i){if(!t)return this;for(var n,r,a,h=this.data,o=this.toBBox(t),s=[],l=[];h||s.length;){if(h||(h=s.pop(),r=s[s.length-1],n=l.pop(),a=!0),h.leaf){var f=e(t,h.children,i);if(-1!==f)return h.children.splice(f,1),s.push(h),this._condense(s),this}a||h.leaf||!m(h,o)?r?(n++,h=r.children[n],a=!1):h=null:(s.push(h),l.push(n),n=0,r=h,h=h.children[0])}return this},r.prototype.toBBox=function(t){return t},r.prototype.compareMinX=function(t,i){return t.minX-i.minX},r.prototype.compareMinY=function(t,i){return t.minY-i.minY},r.prototype.toJSON=function(){return this.data},r.prototype.fromJSON=function(t){return this.data=t,this},r.prototype._all=function(t,i){for(var n=[];t;)t.leaf?i.push.apply(i,t.children):n.push.apply(n,t.children),t=n.pop();return i},r.prototype._build=function(t,i,n,r){var e,h=n-i+1,o=this._maxEntries;if(h<=o)return a(e=p(t.slice(i,n+1)),this.toBBox),e;r||(r=Math.ceil(Math.log(h)/Math.log(o)),o=Math.ceil(h/Math.pow(o,r-1))),(e=p([])).leaf=!1,e.height=r;var s=Math.ceil(h/o),l=s*Math.ceil(Math.sqrt(o));d(t,i,n,l,this.compareMinX);for(var f=i;f<=n;f+=l){var u=Math.min(f+l-1,n);d(t,f,u,s,this.compareMinY);for(var m=f;m<=u;m+=s){var c=Math.min(m+s-1,u);e.children.push(this._build(t,m,c,r-1))}}return a(e,this.toBBox),e},r.prototype._chooseSubtree=function(t,i,n,r){for(;r.push(i),!i.leaf&&r.length-1!==n;){for(var e=1/0,a=1/0,h=void 0,o=0;o<i.children.length;o++){var s=i.children[o],l=f(s),u=(m=t,c=s,(Math.max(c.maxX,m.maxX)-Math.min(c.minX,m.minX))*(Math.max(c.maxY,m.maxY)-Math.min(c.minY,m.minY))-l);u<a?(a=u,e=l<e?l:e,h=s):u===a&&l<e&&(e=l,h=s)}i=h||i.children[0]}var m,c;return i},r.prototype._insert=function(t,i,n){var r=n?t:this.toBBox(t),e=[],a=this._chooseSubtree(r,this.data,i,e);for(a.children.push(t),o(a,r);i>=0&&e[i].children.length>this._maxEntries;)this._split(e,i),i--;this._adjustParentBBoxes(r,e,i)},r.prototype._split=function(t,i){var n=t[i],r=n.children.length,e=this._minEntries;this._chooseSplitAxis(n,e,r);var h=this._chooseSplitIndex(n,e,r),o=p(n.children.splice(h,n.children.length-h));o.height=n.height,o.leaf=n.leaf,a(n,this.toBBox),a(o,this.toBBox),i?t[i-1].children.push(o):this._splitRoot(n,o)},r.prototype._splitRoot=function(t,i){this.data=p([t,i]),this.data.height=t.height+1,this.data.leaf=!1,a(this.data,this.toBBox)},r.prototype._chooseSplitIndex=function(t,i,n){for(var r,e,a,o,s,l,u,m=1/0,c=1/0,p=i;p<=n-i;p++){var d=h(t,0,p,this.toBBox),x=h(t,p,n,this.toBBox),v=(e=d,a=x,o=void 0,s=void 0,l=void 0,u=void 0,o=Math.max(e.minX,a.minX),s=Math.max(e.minY,a.minY),l=Math.min(e.maxX,a.maxX),u=Math.min(e.maxY,a.maxY),Math.max(0,l-o)*Math.max(0,u-s)),M=f(d)+f(x);v<m?(m=v,r=p,c=M<c?M:c):v===m&&M<c&&(c=M,r=p)}return r||n-i},r.prototype._chooseSplitAxis=function(t,i,n){var r=t.leaf?this.compareMinX:s,e=t.leaf?this.compareMinY:l;this._allDistMargin(t,i,n,r)<this._allDistMargin(t,i,n,e)&&t.children.sort(r)},r.prototype._allDistMargin=function(t,i,n,r){t.children.sort(r);for(var e=this.toBBox,a=h(t,0,i,e),s=h(t,n-i,n,e),l=u(a)+u(s),f=i;f<n-i;f++){var m=t.children[f];o(a,t.leaf?e(m):m),l+=u(a)}for(var c=n-i-1;c>=i;c--){var p=t.children[c];o(s,t.leaf?e(p):p),l+=u(s)}return l},r.prototype._adjustParentBBoxes=function(t,i,n){for(var r=n;r>=0;r--)o(i[r],t)},r.prototype._condense=function(t){for(var i=t.length-1,n=void 0;i>=0;i--)0===t[i].children.length?i>0?(n=t[i-1].children).splice(n.indexOf(t[i]),1):this.clear():a(t[i],this.toBBox)},r},"object"==typeof exports&&void 0!==module?module.exports=i():(t=t||self).RBush=i()},{}],20:[function(require,module,exports){var global,factory;global=this,factory=function(){"use strict";var TinyQueue=function(data,compare){if(void 0===data&&(data=[]),void 0===compare&&(compare=defaultCompare),this.data=data,this.length=this.data.length,this.compare=compare,this.length>0)for(var i=(this.length>>1)-1;i>=0;i--)this._down(i)};function defaultCompare(a,b){return a<b?-1:a>b?1:0}return TinyQueue.prototype.push=function(item){this.data.push(item),this.length++,this._up(this.length-1)},TinyQueue.prototype.pop=function(){if(0!==this.length){var top=this.data[0],bottom=this.data.pop();return this.length--,this.length>0&&(this.data[0]=bottom,this._down(0)),top}},TinyQueue.prototype.peek=function(){return this.data[0]},TinyQueue.prototype._up=function(pos){for(var data=this.data,compare=this.compare,item=data[pos];pos>0;){var parent=pos-1>>1,current=data[parent];if(compare(item,current)>=0)break;data[pos]=current,pos=parent}data[pos]=item},TinyQueue.prototype._down=function(pos){for(var data=this.data,compare=this.compare,halfLength=this.length>>1,item=data[pos];pos<halfLength;){var left=1+(pos<<1),best=data[left],right=left+1;if(right<this.length&&compare(data[right],best)<0&&(left=right,best=data[right]),compare(best,item)>=0)break;data[pos]=best,pos=left}data[pos]=item},TinyQueue},"object"==typeof exports&&void 0!==module?module.exports=factory():(global=global||self).TinyQueue=factory()},{}],21:[function(require,module,exports){module.exports={PathFinder:require("geojson-path-finder"),helpers:require("@turf/helpers"),meta:require("@turf/meta"),invariant:require("@turf/invariant"),distance:require("@turf/distance"),nearestPointOnLine:require("@turf/nearest-point-on-line")}},{"@turf/distance":4,"@turf/helpers":6,"@turf/invariant":7,"@turf/meta":10,"@turf/nearest-point-on-line":11,"geojson-path-finder":14}]},{},[21])(21)});
