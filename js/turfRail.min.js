!function(f){if("object"==typeof exports&&"undefined"!=typeof module)module.exports=f();else if("function"==typeof define&&define.amd)define([],f);else{("undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:this).turf=f()}}(function(){return function(){return function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){return o(e[i][1][r]||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}}()({1:[function(require,module,exports){"use strict";var __importDefault=this&&this.__importDefault||function(mod){return mod&&mod.__esModule?mod:{default:mod}};Object.defineProperty(exports,"__esModule",{value:!0});var bearing_1=__importDefault(require("@turf/bearing")),destination_1=__importDefault(require("@turf/destination")),distance_1=__importDefault(require("@turf/distance")),helpers_1=require("@turf/helpers"),invariant_1=require("@turf/invariant");exports.default=function(line,distance,options){void 0===options&&(options={});for(var coords=invariant_1.getGeom(line).coordinates,travelled=0,i=0;i<coords.length&&!(distance>=travelled&&i===coords.length-1);i++){if(travelled>=distance){var overshot=distance-travelled;if(overshot){var direction=bearing_1.default(coords[i],coords[i-1])-180;return destination_1.default(coords[i],overshot,direction,options)}return helpers_1.point(coords[i])}travelled+=distance_1.default(coords[i],coords[i+1],options)}return helpers_1.point(coords[coords.length-1])}},{"@turf/bearing":2,"@turf/destination":3,"@turf/distance":4,"@turf/helpers":5,"@turf/invariant":6}],2:[function(require,module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var helpers_1=require("@turf/helpers"),invariant_1=require("@turf/invariant");function bearing(start,end,options){if(void 0===options&&(options={}),!0===options.final)return function(start,end){var bear=bearing(end,start);return bear=(bear+180)%360}(start,end);var coordinates1=invariant_1.getCoord(start),coordinates2=invariant_1.getCoord(end),lon1=helpers_1.degreesToRadians(coordinates1[0]),lon2=helpers_1.degreesToRadians(coordinates2[0]),lat1=helpers_1.degreesToRadians(coordinates1[1]),lat2=helpers_1.degreesToRadians(coordinates2[1]),a=Math.sin(lon2-lon1)*Math.cos(lat2),b=Math.cos(lat1)*Math.sin(lat2)-Math.sin(lat1)*Math.cos(lat2)*Math.cos(lon2-lon1);return helpers_1.radiansToDegrees(Math.atan2(a,b))}exports.default=bearing},{"@turf/helpers":5,"@turf/invariant":6}],3:[function(require,module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var helpers_1=require("@turf/helpers"),invariant_1=require("@turf/invariant");exports.default=function(origin,distance,bearing,options){void 0===options&&(options={});var coordinates1=invariant_1.getCoord(origin),longitude1=helpers_1.degreesToRadians(coordinates1[0]),latitude1=helpers_1.degreesToRadians(coordinates1[1]),bearingRad=helpers_1.degreesToRadians(bearing),radians=helpers_1.lengthToRadians(distance,options.units),latitude2=Math.asin(Math.sin(latitude1)*Math.cos(radians)+Math.cos(latitude1)*Math.sin(radians)*Math.cos(bearingRad)),longitude2=longitude1+Math.atan2(Math.sin(bearingRad)*Math.sin(radians)*Math.cos(latitude1),Math.cos(radians)-Math.sin(latitude1)*Math.sin(latitude2)),lng=helpers_1.radiansToDegrees(longitude2),lat=helpers_1.radiansToDegrees(latitude2);return helpers_1.point([lng,lat],options.properties)}},{"@turf/helpers":5,"@turf/invariant":6}],4:[function(require,module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var invariant_1=require("@turf/invariant"),helpers_1=require("@turf/helpers");exports.default=function(from,to,options){void 0===options&&(options={});var coordinates1=invariant_1.getCoord(from),coordinates2=invariant_1.getCoord(to),dLat=helpers_1.degreesToRadians(coordinates2[1]-coordinates1[1]),dLon=helpers_1.degreesToRadians(coordinates2[0]-coordinates1[0]),lat1=helpers_1.degreesToRadians(coordinates1[1]),lat2=helpers_1.degreesToRadians(coordinates2[1]),a=Math.pow(Math.sin(dLat/2),2)+Math.pow(Math.sin(dLon/2),2)*Math.cos(lat1)*Math.cos(lat2);return helpers_1.radiansToLength(2*Math.atan2(Math.sqrt(a),Math.sqrt(1-a)),options.units)}},{"@turf/helpers":5,"@turf/invariant":6}],5:[function(require,module,exports){"use strict";function feature(geom,properties,options){void 0===options&&(options={});var feat={type:"Feature"};return(0===options.id||options.id)&&(feat.id=options.id),options.bbox&&(feat.bbox=options.bbox),feat.properties=properties||{},feat.geometry=geom,feat}function point(coordinates,properties,options){return void 0===options&&(options={}),feature({type:"Point",coordinates:coordinates},properties,options)}function polygon(coordinates,properties,options){void 0===options&&(options={});for(var _i=0,coordinates_1=coordinates;_i<coordinates_1.length;_i++){var ring=coordinates_1[_i];if(ring.length<4)throw new Error("Each LinearRing of a Polygon must have 4 or more Positions.");for(var j=0;j<ring[ring.length-1].length;j++)if(ring[ring.length-1][j]!==ring[0][j])throw new Error("First and last Position are not equivalent.")}return feature({type:"Polygon",coordinates:coordinates},properties,options)}function lineString(coordinates,properties,options){if(void 0===options&&(options={}),coordinates.length<2)throw new Error("coordinates must be an array of two or more positions");return feature({type:"LineString",coordinates:coordinates},properties,options)}function featureCollection(features,options){void 0===options&&(options={});var fc={type:"FeatureCollection"};return options.id&&(fc.id=options.id),options.bbox&&(fc.bbox=options.bbox),fc.features=features,fc}function multiLineString(coordinates,properties,options){return void 0===options&&(options={}),feature({type:"MultiLineString",coordinates:coordinates},properties,options)}function multiPoint(coordinates,properties,options){return void 0===options&&(options={}),feature({type:"MultiPoint",coordinates:coordinates},properties,options)}function multiPolygon(coordinates,properties,options){return void 0===options&&(options={}),feature({type:"MultiPolygon",coordinates:coordinates},properties,options)}function radiansToLength(radians,units){void 0===units&&(units="kilometers");var factor=exports.factors[units];if(!factor)throw new Error(units+" units is invalid");return radians*factor}function lengthToRadians(distance,units){void 0===units&&(units="kilometers");var factor=exports.factors[units];if(!factor)throw new Error(units+" units is invalid");return distance/factor}function radiansToDegrees(radians){return 180*(radians%(2*Math.PI))/Math.PI}function isNumber(num){return!isNaN(num)&&null!==num&&!Array.isArray(num)&&!/^\s*$/.test(num)}Object.defineProperty(exports,"__esModule",{value:!0}),exports.earthRadius=6371008.8,exports.factors={centimeters:100*exports.earthRadius,centimetres:100*exports.earthRadius,degrees:exports.earthRadius/111325,feet:3.28084*exports.earthRadius,inches:39.37*exports.earthRadius,kilometers:exports.earthRadius/1e3,kilometres:exports.earthRadius/1e3,meters:exports.earthRadius,metres:exports.earthRadius,miles:exports.earthRadius/1609.344,millimeters:1e3*exports.earthRadius,millimetres:1e3*exports.earthRadius,nauticalmiles:exports.earthRadius/1852,radians:1,yards:exports.earthRadius/1.0936},exports.unitsFactors={centimeters:100,centimetres:100,degrees:1/111325,feet:3.28084,inches:39.37,kilometers:.001,kilometres:.001,meters:1,metres:1,miles:1/1609.344,millimeters:1e3,millimetres:1e3,nauticalmiles:1/1852,radians:1/exports.earthRadius,yards:1/1.0936},exports.areaFactors={acres:247105e-9,centimeters:1e4,centimetres:1e4,feet:10.763910417,inches:1550.003100006,kilometers:1e-6,kilometres:1e-6,meters:1,metres:1,miles:3.86e-7,millimeters:1e6,millimetres:1e6,yards:1.195990046},exports.feature=feature,exports.geometry=function(type,coordinates,options){switch(void 0===options&&(options={}),type){case"Point":return point(coordinates).geometry;case"LineString":return lineString(coordinates).geometry;case"Polygon":return polygon(coordinates).geometry;case"MultiPoint":return multiPoint(coordinates).geometry;case"MultiLineString":return multiLineString(coordinates).geometry;case"MultiPolygon":return multiPolygon(coordinates).geometry;default:throw new Error(type+" is invalid")}},exports.point=point,exports.points=function(coordinates,properties,options){return void 0===options&&(options={}),featureCollection(coordinates.map(function(coords){return point(coords,properties)}),options)},exports.polygon=polygon,exports.polygons=function(coordinates,properties,options){return void 0===options&&(options={}),featureCollection(coordinates.map(function(coords){return polygon(coords,properties)}),options)},exports.lineString=lineString,exports.lineStrings=function(coordinates,properties,options){return void 0===options&&(options={}),featureCollection(coordinates.map(function(coords){return lineString(coords,properties)}),options)},exports.featureCollection=featureCollection,exports.multiLineString=multiLineString,exports.multiPoint=multiPoint,exports.multiPolygon=multiPolygon,exports.geometryCollection=function(geometries,properties,options){return void 0===options&&(options={}),feature({type:"GeometryCollection",geometries:geometries},properties,options)},exports.round=function(num,precision){if(void 0===precision&&(precision=0),precision&&!(precision>=0))throw new Error("precision must be a positive number");var multiplier=Math.pow(10,precision||0);return Math.round(num*multiplier)/multiplier},exports.radiansToLength=radiansToLength,exports.lengthToRadians=lengthToRadians,exports.lengthToDegrees=function(distance,units){return radiansToDegrees(lengthToRadians(distance,units))},exports.bearingToAzimuth=function(bearing){var angle=bearing%360;return angle<0&&(angle+=360),angle},exports.radiansToDegrees=radiansToDegrees,exports.degreesToRadians=function(degrees){return degrees%360*Math.PI/180},exports.convertLength=function(length,originalUnit,finalUnit){if(void 0===originalUnit&&(originalUnit="kilometers"),void 0===finalUnit&&(finalUnit="kilometers"),!(length>=0))throw new Error("length must be a positive number");return radiansToLength(lengthToRadians(length,originalUnit),finalUnit)},exports.convertArea=function(area,originalUnit,finalUnit){if(void 0===originalUnit&&(originalUnit="meters"),void 0===finalUnit&&(finalUnit="kilometers"),!(area>=0))throw new Error("area must be a positive number");var startFactor=exports.areaFactors[originalUnit];if(!startFactor)throw new Error("invalid original units");var finalFactor=exports.areaFactors[finalUnit];if(!finalFactor)throw new Error("invalid final units");return area/startFactor*finalFactor},exports.isNumber=isNumber,exports.isObject=function(input){return!!input&&input.constructor===Object},exports.validateBBox=function(bbox){if(!bbox)throw new Error("bbox is required");if(!Array.isArray(bbox))throw new Error("bbox must be an Array");if(4!==bbox.length&&6!==bbox.length)throw new Error("bbox must be an Array of 4 or 6 numbers");bbox.forEach(function(num){if(!isNumber(num))throw new Error("bbox must only contain numbers")})},exports.validateId=function(id){if(!id)throw new Error("id is required");if(-1===["string","number"].indexOf(typeof id))throw new Error("id must be a number or a string")},exports.radians2degrees=function(){throw new Error("method has been renamed to `radiansToDegrees`")},exports.degrees2radians=function(){throw new Error("method has been renamed to `degreesToRadians`")},exports.distanceToDegrees=function(){throw new Error("method has been renamed to `lengthToDegrees`")},exports.distanceToRadians=function(){throw new Error("method has been renamed to `lengthToRadians`")},exports.radiansToDistance=function(){throw new Error("method has been renamed to `radiansToLength`")},exports.bearingToAngle=function(){throw new Error("method has been renamed to `bearingToAzimuth`")},exports.convertDistance=function(){throw new Error("method has been renamed to `convertLength`")}},{}],6:[function(require,module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var helpers_1=require("@turf/helpers");exports.getCoord=function(coord){if(!coord)throw new Error("coord is required");if(!Array.isArray(coord)){if("Feature"===coord.type&&null!==coord.geometry&&"Point"===coord.geometry.type)return coord.geometry.coordinates;if("Point"===coord.type)return coord.coordinates}if(Array.isArray(coord)&&coord.length>=2&&!Array.isArray(coord[0])&&!Array.isArray(coord[1]))return coord;throw new Error("coord must be GeoJSON Point or an Array of numbers")},exports.getCoords=function(coords){if(Array.isArray(coords))return coords;if("Feature"===coords.type){if(null!==coords.geometry)return coords.geometry.coordinates}else if(coords.coordinates)return coords.coordinates;throw new Error("coords must be GeoJSON Feature, Geometry Object or an Array")},exports.containsNumber=function containsNumber(coordinates){if(coordinates.length>1&&helpers_1.isNumber(coordinates[0])&&helpers_1.isNumber(coordinates[1]))return!0;if(Array.isArray(coordinates[0])&&coordinates[0].length)return containsNumber(coordinates[0]);throw new Error("coordinates must only contain numbers")},exports.geojsonType=function(value,type,name){if(!type||!name)throw new Error("type and name required");if(!value||value.type!==type)throw new Error("Invalid input to "+name+": must be a "+type+", given "+value.type)},exports.featureOf=function(feature,type,name){if(!feature)throw new Error("No feature passed");if(!name)throw new Error(".featureOf() requires a name");if(!feature||"Feature"!==feature.type||!feature.geometry)throw new Error("Invalid input to "+name+", Feature with geometry required");if(!feature.geometry||feature.geometry.type!==type)throw new Error("Invalid input to "+name+": must be a "+type+", given "+feature.geometry.type)},exports.collectionOf=function(featureCollection,type,name){if(!featureCollection)throw new Error("No featureCollection passed");if(!name)throw new Error(".collectionOf() requires a name");if(!featureCollection||"FeatureCollection"!==featureCollection.type)throw new Error("Invalid input to "+name+", FeatureCollection required");for(var _i=0,_a=featureCollection.features;_i<_a.length;_i++){var feature=_a[_i];if(!feature||"Feature"!==feature.type||!feature.geometry)throw new Error("Invalid input to "+name+", Feature with geometry required");if(!feature.geometry||feature.geometry.type!==type)throw new Error("Invalid input to "+name+": must be a "+type+", given "+feature.geometry.type)}},exports.getGeom=function(geojson){return"Feature"===geojson.type?geojson.geometry:geojson},exports.getType=function(geojson,name){return"FeatureCollection"===geojson.type?"FeatureCollection":"GeometryCollection"===geojson.type?"GeometryCollection":"Feature"===geojson.type&&null!==geojson.geometry?geojson.geometry.type:geojson.type}},{"@turf/helpers":5}],7:[function(require,module,exports){"use strict";var __importDefault=this&&this.__importDefault||function(mod){return mod&&mod.__esModule?mod:{default:mod}};Object.defineProperty(exports,"__esModule",{value:!0});var distance_1=__importDefault(require("@turf/distance")),meta_1=require("@turf/meta");exports.default=function(geojson,options){return void 0===options&&(options={}),meta_1.segmentReduce(geojson,function(previousValue,segment){var coords=segment.geometry.coordinates;return previousValue+distance_1.default(coords[0],coords[1],options)},0)}},{"@turf/distance":4,"@turf/meta":23}],8:[function(require,module,exports){"use strict";var meta=require("@turf/meta"),invariant=require("@turf/invariant"),helpers=require("@turf/helpers");function ab(segment){var start=segment[0],end=segment[1];return[end[0]-start[0],end[1]-start[1]]}function crossProduct(v1,v2){return v1[0]*v2[1]-v2[0]*v1[1]}function intersection(a,b){return!function(a,b){return 0===crossProduct(ab(a),ab(b))}(a,b)&&function(a,b){var v1,v2,p=a[0],r=ab(a),q=b[0],s=ab(b),cross=crossProduct(r,s);return function(v1,v2){return[v1[0]+v2[0],v1[1]+v2[1]]}(p,function(s,v){return[s*v[0],s*v[1]]}(crossProduct((v2=p,[(v1=q)[0]-v2[0],v1[1]-v2[1]]),s)/cross,r))}(a,b)}function lineOffset(geojson,distance,options){if(options=options||{},!helpers.isObject(options))throw new Error("options is invalid");var units=options.units;if(!geojson)throw new Error("geojson is required");if(void 0===distance||null===distance||isNaN(distance))throw new Error("distance is required");var type=invariant.getType(geojson),properties=geojson.properties;switch(type){case"LineString":return lineOffsetFeature(geojson,distance,units);case"MultiLineString":var coords=[];return meta.flattenEach(geojson,function(feature){coords.push(lineOffsetFeature(feature,distance,units).geometry.coordinates)}),helpers.multiLineString(coords,properties);default:throw new Error("geometry "+type+" is not supported")}}function lineOffsetFeature(line,distance,units){var segments=[],offsetDegrees=helpers.lengthToDegrees(distance,units),coords=invariant.getCoords(line),finalCoords=[];return coords.forEach(function(currentCoords,index){if(index!==coords.length-1){var segment=(point1=currentCoords,point2=coords[index+1],offset=offsetDegrees,L=Math.sqrt((point1[0]-point2[0])*(point1[0]-point2[0])+(point1[1]-point2[1])*(point1[1]-point2[1])),out1x=point1[0]+offset*(point2[1]-point1[1])/L,out2x=point2[0]+offset*(point2[1]-point1[1])/L,out1y=point1[1]+offset*(point1[0]-point2[0])/L,out2y=point2[1]+offset*(point1[0]-point2[0])/L,[[out1x,out1y],[out2x,out2y]]);if(segments.push(segment),index>0){var seg2Coords=segments[index-1],intersects=intersection(segment,seg2Coords);!1!==intersects&&(seg2Coords[1]=intersects,segment[0]=intersects),finalCoords.push(seg2Coords[0]),index===coords.length-2&&(finalCoords.push(segment[0]),finalCoords.push(segment[1]))}2===coords.length&&(finalCoords.push(segment[0]),finalCoords.push(segment[1]))}var point1,point2,offset,L,out1x,out2x,out1y,out2y}),helpers.lineString(finalCoords,line.properties)}module.exports=lineOffset,module.exports.default=lineOffset},{"@turf/helpers":9,"@turf/invariant":10,"@turf/meta":11}],9:[function(require,module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var factors={meters:6371008.8,metres:6371008.8,millimeters:6371008800,millimetres:6371008800,centimeters:637100880,centimetres:637100880,kilometers:6371.0088,kilometres:6371.0088,miles:3958.761333810546,nauticalmiles:6371008.8/1852,inches:6371008.8*39.37,yards:6371008.8/1.0936,feet:20902260.511392,radians:1,degrees:6371008.8/111325},unitsFactors={meters:1,metres:1,millimeters:1e3,millimetres:1e3,centimeters:100,centimetres:100,kilometers:.001,kilometres:.001,miles:1/1609.344,nauticalmiles:1/1852,inches:39.37,yards:1/1.0936,feet:3.28084,radians:1/6371008.8,degrees:1/111325},areaFactors={meters:1,metres:1,millimeters:1e6,millimetres:1e6,centimeters:1e4,centimetres:1e4,kilometers:1e-6,kilometres:1e-6,acres:247105e-9,miles:3.86e-7,yards:1.195990046,feet:10.763910417,inches:1550.003100006};function feature(geometry,properties,options){if(!isObject(options=options||{}))throw new Error("options is invalid");var bbox=options.bbox,id=options.id;if(void 0===geometry)throw new Error("geometry is required");if(properties&&properties.constructor!==Object)throw new Error("properties must be an Object");bbox&&validateBBox(bbox),id&&validateId(id);var feat={type:"Feature"};return id&&(feat.id=id),bbox&&(feat.bbox=bbox),feat.properties=properties||{},feat.geometry=geometry,feat}function point(coordinates,properties,options){if(!coordinates)throw new Error("coordinates is required");if(!Array.isArray(coordinates))throw new Error("coordinates must be an Array");if(coordinates.length<2)throw new Error("coordinates must be at least 2 numbers long");if(!isNumber(coordinates[0])||!isNumber(coordinates[1]))throw new Error("coordinates must contain numbers");return feature({type:"Point",coordinates:coordinates},properties,options)}function polygon(coordinates,properties,options){if(!coordinates)throw new Error("coordinates is required");for(var i=0;i<coordinates.length;i++){var ring=coordinates[i];if(ring.length<4)throw new Error("Each LinearRing of a Polygon must have 4 or more Positions.");for(var j=0;j<ring[ring.length-1].length;j++){if(0===i&&0===j&&!isNumber(ring[0][0])||!isNumber(ring[0][1]))throw new Error("coordinates must contain numbers");if(ring[ring.length-1][j]!==ring[0][j])throw new Error("First and last Position are not equivalent.")}}return feature({type:"Polygon",coordinates:coordinates},properties,options)}function lineString(coordinates,properties,options){if(!coordinates)throw new Error("coordinates is required");if(coordinates.length<2)throw new Error("coordinates must be an array of two or more positions");if(!isNumber(coordinates[0][1])||!isNumber(coordinates[0][1]))throw new Error("coordinates must contain numbers");return feature({type:"LineString",coordinates:coordinates},properties,options)}function featureCollection(features,options){if(!isObject(options=options||{}))throw new Error("options is invalid");var bbox=options.bbox,id=options.id;if(!features)throw new Error("No features passed");if(!Array.isArray(features))throw new Error("features must be an Array");bbox&&validateBBox(bbox),id&&validateId(id);var fc={type:"FeatureCollection"};return id&&(fc.id=id),bbox&&(fc.bbox=bbox),fc.features=features,fc}function multiLineString(coordinates,properties,options){if(!coordinates)throw new Error("coordinates is required");return feature({type:"MultiLineString",coordinates:coordinates},properties,options)}function multiPoint(coordinates,properties,options){if(!coordinates)throw new Error("coordinates is required");return feature({type:"MultiPoint",coordinates:coordinates},properties,options)}function multiPolygon(coordinates,properties,options){if(!coordinates)throw new Error("coordinates is required");return feature({type:"MultiPolygon",coordinates:coordinates},properties,options)}function radiansToLength(radians,units){if(void 0===radians||null===radians)throw new Error("radians is required");if(units&&"string"!=typeof units)throw new Error("units must be a string");var factor=factors[units||"kilometers"];if(!factor)throw new Error(units+" units is invalid");return radians*factor}function lengthToRadians(distance,units){if(void 0===distance||null===distance)throw new Error("distance is required");if(units&&"string"!=typeof units)throw new Error("units must be a string");var factor=factors[units||"kilometers"];if(!factor)throw new Error(units+" units is invalid");return distance/factor}function radiansToDegrees(radians){if(null===radians||void 0===radians)throw new Error("radians is required");return 180*(radians%(2*Math.PI))/Math.PI}function isNumber(num){return!isNaN(num)&&null!==num&&!Array.isArray(num)}function isObject(input){return!!input&&input.constructor===Object}function validateBBox(bbox){if(!bbox)throw new Error("bbox is required");if(!Array.isArray(bbox))throw new Error("bbox must be an Array");if(4!==bbox.length&&6!==bbox.length)throw new Error("bbox must be an Array of 4 or 6 numbers");bbox.forEach(function(num){if(!isNumber(num))throw new Error("bbox must only contain numbers")})}function validateId(id){if(!id)throw new Error("id is required");if(-1===["string","number"].indexOf(typeof id))throw new Error("id must be a number or a string")}exports.earthRadius=6371008.8,exports.factors=factors,exports.unitsFactors=unitsFactors,exports.areaFactors=areaFactors,exports.feature=feature,exports.geometry=function(type,coordinates,options){if(!isObject(options=options||{}))throw new Error("options is invalid");var geom,bbox=options.bbox;if(!type)throw new Error("type is required");if(!coordinates)throw new Error("coordinates is required");if(!Array.isArray(coordinates))throw new Error("coordinates must be an Array");switch(bbox&&validateBBox(bbox),type){case"Point":geom=point(coordinates).geometry;break;case"LineString":geom=lineString(coordinates).geometry;break;case"Polygon":geom=polygon(coordinates).geometry;break;case"MultiPoint":geom=multiPoint(coordinates).geometry;break;case"MultiLineString":geom=multiLineString(coordinates).geometry;break;case"MultiPolygon":geom=multiPolygon(coordinates).geometry;break;default:throw new Error(type+" is invalid")}return bbox&&(geom.bbox=bbox),geom},exports.point=point,exports.points=function(coordinates,properties,options){if(!coordinates)throw new Error("coordinates is required");if(!Array.isArray(coordinates))throw new Error("coordinates must be an Array");return featureCollection(coordinates.map(function(coords){return point(coords,properties)}),options)},exports.polygon=polygon,exports.polygons=function(coordinates,properties,options){if(!coordinates)throw new Error("coordinates is required");if(!Array.isArray(coordinates))throw new Error("coordinates must be an Array");return featureCollection(coordinates.map(function(coords){return polygon(coords,properties)}),options)},exports.lineString=lineString,exports.lineStrings=function(coordinates,properties,options){if(!coordinates)throw new Error("coordinates is required");if(!Array.isArray(coordinates))throw new Error("coordinates must be an Array");return featureCollection(coordinates.map(function(coords){return lineString(coords,properties)}),options)},exports.featureCollection=featureCollection,exports.multiLineString=multiLineString,exports.multiPoint=multiPoint,exports.multiPolygon=multiPolygon,exports.geometryCollection=function(geometries,properties,options){if(!geometries)throw new Error("geometries is required");if(!Array.isArray(geometries))throw new Error("geometries must be an Array");return feature({type:"GeometryCollection",geometries:geometries},properties,options)},exports.round=function(num,precision){if(void 0===num||null===num||isNaN(num))throw new Error("num is required");if(precision&&!(precision>=0))throw new Error("precision must be a positive number");var multiplier=Math.pow(10,precision||0);return Math.round(num*multiplier)/multiplier},exports.radiansToLength=radiansToLength,exports.lengthToRadians=lengthToRadians,exports.lengthToDegrees=function(distance,units){return radiansToDegrees(lengthToRadians(distance,units))},exports.bearingToAzimuth=function(bearing){if(null===bearing||void 0===bearing)throw new Error("bearing is required");var angle=bearing%360;return angle<0&&(angle+=360),angle},exports.radiansToDegrees=radiansToDegrees,exports.degreesToRadians=function(degrees){if(null===degrees||void 0===degrees)throw new Error("degrees is required");return degrees%360*Math.PI/180},exports.convertLength=function(length,originalUnit,finalUnit){if(null===length||void 0===length)throw new Error("length is required");if(!(length>=0))throw new Error("length must be a positive number");return radiansToLength(lengthToRadians(length,originalUnit),finalUnit||"kilometers")},exports.convertArea=function(area,originalUnit,finalUnit){if(null===area||void 0===area)throw new Error("area is required");if(!(area>=0))throw new Error("area must be a positive number");var startFactor=areaFactors[originalUnit||"meters"];if(!startFactor)throw new Error("invalid original units");var finalFactor=areaFactors[finalUnit||"kilometers"];if(!finalFactor)throw new Error("invalid final units");return area/startFactor*finalFactor},exports.isNumber=isNumber,exports.isObject=isObject,exports.validateBBox=validateBBox,exports.validateId=validateId,exports.radians2degrees=function(){throw new Error("method has been renamed to `radiansToDegrees`")},exports.degrees2radians=function(){throw new Error("method has been renamed to `degreesToRadians`")},exports.distanceToDegrees=function(){throw new Error("method has been renamed to `lengthToDegrees`")},exports.distanceToRadians=function(){throw new Error("method has been renamed to `lengthToRadians`")},exports.radiansToDistance=function(){throw new Error("method has been renamed to `radiansToLength`")},exports.bearingToAngle=function(){throw new Error("method has been renamed to `bearingToAzimuth`")},exports.convertDistance=function(){throw new Error("method has been renamed to `convertLength`")}},{}],10:[function(require,module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var helpers=require("@turf/helpers");exports.getCoord=function(coord){if(!coord)throw new Error("coord is required");if("Feature"===coord.type&&null!==coord.geometry&&"Point"===coord.geometry.type)return coord.geometry.coordinates;if("Point"===coord.type)return coord.coordinates;if(Array.isArray(coord)&&coord.length>=2&&void 0===coord[0].length&&void 0===coord[1].length)return coord;throw new Error("coord must be GeoJSON Point or an Array of numbers")},exports.getCoords=function(coords){if(!coords)throw new Error("coords is required");if("Feature"===coords.type&&null!==coords.geometry)return coords.geometry.coordinates;if(coords.coordinates)return coords.coordinates;if(Array.isArray(coords))return coords;throw new Error("coords must be GeoJSON Feature, Geometry Object or an Array")},exports.containsNumber=function containsNumber(coordinates){if(coordinates.length>1&&helpers.isNumber(coordinates[0])&&helpers.isNumber(coordinates[1]))return!0;if(Array.isArray(coordinates[0])&&coordinates[0].length)return containsNumber(coordinates[0]);throw new Error("coordinates must only contain numbers")},exports.geojsonType=function(value,type,name){if(!type||!name)throw new Error("type and name required");if(!value||value.type!==type)throw new Error("Invalid input to "+name+": must be a "+type+", given "+value.type)},exports.featureOf=function(feature,type,name){if(!feature)throw new Error("No feature passed");if(!name)throw new Error(".featureOf() requires a name");if(!feature||"Feature"!==feature.type||!feature.geometry)throw new Error("Invalid input to "+name+", Feature with geometry required");if(!feature.geometry||feature.geometry.type!==type)throw new Error("Invalid input to "+name+": must be a "+type+", given "+feature.geometry.type)},exports.collectionOf=function(featureCollection,type,name){if(!featureCollection)throw new Error("No featureCollection passed");if(!name)throw new Error(".collectionOf() requires a name");if(!featureCollection||"FeatureCollection"!==featureCollection.type)throw new Error("Invalid input to "+name+", FeatureCollection required");for(var i=0;i<featureCollection.features.length;i++){var feature=featureCollection.features[i];if(!feature||"Feature"!==feature.type||!feature.geometry)throw new Error("Invalid input to "+name+", Feature with geometry required");if(!feature.geometry||feature.geometry.type!==type)throw new Error("Invalid input to "+name+": must be a "+type+", given "+feature.geometry.type)}},exports.getGeom=function(geojson){if(!geojson)throw new Error("geojson is required");if(void 0!==geojson.geometry)return geojson.geometry;if(geojson.coordinates||geojson.geometries)return geojson;throw new Error("geojson must be a valid Feature or Geometry Object")},exports.getGeomType=function(){throw new Error("invariant.getGeomType has been deprecated in v5.0 in favor of invariant.getType")},exports.getType=function(geojson,name){if(!geojson)throw new Error((name||"geojson")+" is required");if(geojson.geometry&&geojson.geometry.type)return geojson.geometry.type;if(geojson.type)return geojson.type;throw new Error((name||"geojson")+" is invalid")}},{"@turf/helpers":9}],11:[function(require,module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var helpers=require("@turf/helpers");function coordEach(geojson,callback,excludeWrapCoord){if(null!==geojson)for(var j,k,l,geometry,stopG,coords,geometryMaybeCollection,isGeometryCollection,wrapShrink=0,coordIndex=0,type=geojson.type,isFeatureCollection="FeatureCollection"===type,isFeature="Feature"===type,stop=isFeatureCollection?geojson.features.length:1,featureIndex=0;featureIndex<stop;featureIndex++){stopG=(isGeometryCollection=!!(geometryMaybeCollection=isFeatureCollection?geojson.features[featureIndex].geometry:isFeature?geojson.geometry:geojson)&&"GeometryCollection"===geometryMaybeCollection.type)?geometryMaybeCollection.geometries.length:1;for(var geomIndex=0;geomIndex<stopG;geomIndex++){var multiFeatureIndex=0,geometryIndex=0;if(null!==(geometry=isGeometryCollection?geometryMaybeCollection.geometries[geomIndex]:geometryMaybeCollection)){coords=geometry.coordinates;var geomType=geometry.type;switch(wrapShrink=!excludeWrapCoord||"Polygon"!==geomType&&"MultiPolygon"!==geomType?0:1,geomType){case null:break;case"Point":if(!1===callback(coords,coordIndex,featureIndex,multiFeatureIndex,geometryIndex))return!1;coordIndex++,multiFeatureIndex++;break;case"LineString":case"MultiPoint":for(j=0;j<coords.length;j++){if(!1===callback(coords[j],coordIndex,featureIndex,multiFeatureIndex,geometryIndex))return!1;coordIndex++,"MultiPoint"===geomType&&multiFeatureIndex++}"LineString"===geomType&&multiFeatureIndex++;break;case"Polygon":case"MultiLineString":for(j=0;j<coords.length;j++){for(k=0;k<coords[j].length-wrapShrink;k++){if(!1===callback(coords[j][k],coordIndex,featureIndex,multiFeatureIndex,geometryIndex))return!1;coordIndex++}"MultiLineString"===geomType&&multiFeatureIndex++,"Polygon"===geomType&&geometryIndex++}"Polygon"===geomType&&multiFeatureIndex++;break;case"MultiPolygon":for(j=0;j<coords.length;j++){for("MultiPolygon"===geomType&&(geometryIndex=0),k=0;k<coords[j].length;k++){for(l=0;l<coords[j][k].length-wrapShrink;l++){if(!1===callback(coords[j][k][l],coordIndex,featureIndex,multiFeatureIndex,geometryIndex))return!1;coordIndex++}geometryIndex++}multiFeatureIndex++}break;case"GeometryCollection":for(j=0;j<geometry.geometries.length;j++)if(!1===coordEach(geometry.geometries[j],callback,excludeWrapCoord))return!1;break;default:throw new Error("Unknown Geometry Type")}}}}}function propEach(geojson,callback){var i;switch(geojson.type){case"FeatureCollection":for(i=0;i<geojson.features.length&&!1!==callback(geojson.features[i].properties,i);i++);break;case"Feature":callback(geojson.properties,0)}}function featureEach(geojson,callback){if("Feature"===geojson.type)callback(geojson,0);else if("FeatureCollection"===geojson.type)for(var i=0;i<geojson.features.length&&!1!==callback(geojson.features[i],i);i++);}function geomEach(geojson,callback){var i,j,g,geometry,stopG,geometryMaybeCollection,isGeometryCollection,featureProperties,featureBBox,featureId,featureIndex=0,isFeatureCollection="FeatureCollection"===geojson.type,isFeature="Feature"===geojson.type,stop=isFeatureCollection?geojson.features.length:1;for(i=0;i<stop;i++){for(geometryMaybeCollection=isFeatureCollection?geojson.features[i].geometry:isFeature?geojson.geometry:geojson,featureProperties=isFeatureCollection?geojson.features[i].properties:isFeature?geojson.properties:{},featureBBox=isFeatureCollection?geojson.features[i].bbox:isFeature?geojson.bbox:void 0,featureId=isFeatureCollection?geojson.features[i].id:isFeature?geojson.id:void 0,stopG=(isGeometryCollection=!!geometryMaybeCollection&&"GeometryCollection"===geometryMaybeCollection.type)?geometryMaybeCollection.geometries.length:1,g=0;g<stopG;g++)if(null!==(geometry=isGeometryCollection?geometryMaybeCollection.geometries[g]:geometryMaybeCollection))switch(geometry.type){case"Point":case"LineString":case"MultiPoint":case"Polygon":case"MultiLineString":case"MultiPolygon":if(!1===callback(geometry,featureIndex,featureProperties,featureBBox,featureId))return!1;break;case"GeometryCollection":for(j=0;j<geometry.geometries.length;j++)if(!1===callback(geometry.geometries[j],featureIndex,featureProperties,featureBBox,featureId))return!1;break;default:throw new Error("Unknown Geometry Type")}else if(!1===callback(null,featureIndex,featureProperties,featureBBox,featureId))return!1;featureIndex++}}function flattenEach(geojson,callback){geomEach(geojson,function(geometry,featureIndex,properties,bbox,id){var geomType,type=null===geometry?null:geometry.type;switch(type){case null:case"Point":case"LineString":case"Polygon":return!1!==callback(helpers.feature(geometry,properties,{bbox:bbox,id:id}),featureIndex,0)&&void 0}switch(type){case"MultiPoint":geomType="Point";break;case"MultiLineString":geomType="LineString";break;case"MultiPolygon":geomType="Polygon"}for(var multiFeatureIndex=0;multiFeatureIndex<geometry.coordinates.length;multiFeatureIndex++){var geom={type:geomType,coordinates:geometry.coordinates[multiFeatureIndex]};if(!1===callback(helpers.feature(geom,properties),featureIndex,multiFeatureIndex))return!1}})}function segmentEach(geojson,callback){flattenEach(geojson,function(feature$$1,featureIndex,multiFeatureIndex){var segmentIndex=0;if(feature$$1.geometry){var previousCoords,type=feature$$1.geometry.type;if("Point"!==type&&"MultiPoint"!==type)return!1!==coordEach(feature$$1,function(currentCoord,coordIndex,featureIndexCoord,mutliPartIndexCoord,geometryIndex){if(void 0!==previousCoords){var currentSegment=helpers.lineString([previousCoords,currentCoord],feature$$1.properties);if(!1===callback(currentSegment,featureIndex,multiFeatureIndex,geometryIndex,segmentIndex))return!1;segmentIndex++,previousCoords=currentCoord}else previousCoords=currentCoord})&&void 0}})}function lineEach(geojson,callback){if(!geojson)throw new Error("geojson is required");flattenEach(geojson,function(feature$$1,featureIndex,multiFeatureIndex){if(null!==feature$$1.geometry){var type=feature$$1.geometry.type,coords=feature$$1.geometry.coordinates;switch(type){case"LineString":if(!1===callback(feature$$1,featureIndex,multiFeatureIndex,0,0))return!1;break;case"Polygon":for(var geometryIndex=0;geometryIndex<coords.length;geometryIndex++)if(!1===callback(helpers.lineString(coords[geometryIndex],feature$$1.properties),featureIndex,multiFeatureIndex,geometryIndex))return!1}}})}exports.coordEach=coordEach,exports.coordReduce=function(geojson,callback,initialValue,excludeWrapCoord){var previousValue=initialValue;return coordEach(geojson,function(currentCoord,coordIndex,featureIndex,multiFeatureIndex,geometryIndex){previousValue=0===coordIndex&&void 0===initialValue?currentCoord:callback(previousValue,currentCoord,coordIndex,featureIndex,multiFeatureIndex,geometryIndex)},excludeWrapCoord),previousValue},exports.propEach=propEach,exports.propReduce=function(geojson,callback,initialValue){var previousValue=initialValue;return propEach(geojson,function(currentProperties,featureIndex){previousValue=0===featureIndex&&void 0===initialValue?currentProperties:callback(previousValue,currentProperties,featureIndex)}),previousValue},exports.featureEach=featureEach,exports.featureReduce=function(geojson,callback,initialValue){var previousValue=initialValue;return featureEach(geojson,function(currentFeature,featureIndex){previousValue=0===featureIndex&&void 0===initialValue?currentFeature:callback(previousValue,currentFeature,featureIndex)}),previousValue},exports.coordAll=function(geojson){var coords=[];return coordEach(geojson,function(coord){coords.push(coord)}),coords},exports.geomEach=geomEach,exports.geomReduce=function(geojson,callback,initialValue){var previousValue=initialValue;return geomEach(geojson,function(currentGeometry,featureIndex,featureProperties,featureBBox,featureId){previousValue=0===featureIndex&&void 0===initialValue?currentGeometry:callback(previousValue,currentGeometry,featureIndex,featureProperties,featureBBox,featureId)}),previousValue},exports.flattenEach=flattenEach,exports.flattenReduce=function(geojson,callback,initialValue){var previousValue=initialValue;return flattenEach(geojson,function(currentFeature,featureIndex,multiFeatureIndex){previousValue=0===featureIndex&&0===multiFeatureIndex&&void 0===initialValue?currentFeature:callback(previousValue,currentFeature,featureIndex,multiFeatureIndex)}),previousValue},exports.segmentEach=segmentEach,exports.segmentReduce=function(geojson,callback,initialValue){var previousValue=initialValue,started=!1;return segmentEach(geojson,function(currentSegment,featureIndex,multiFeatureIndex,geometryIndex,segmentIndex){previousValue=!1===started&&void 0===initialValue?currentSegment:callback(previousValue,currentSegment,featureIndex,multiFeatureIndex,geometryIndex,segmentIndex),started=!0}),previousValue},exports.lineEach=lineEach,exports.lineReduce=function(geojson,callback,initialValue){var previousValue=initialValue;return lineEach(geojson,function(currentLine,featureIndex,multiFeatureIndex,geometryIndex){previousValue=0===featureIndex&&void 0===initialValue?currentLine:callback(previousValue,currentLine,featureIndex,multiFeatureIndex,geometryIndex)}),previousValue},exports.findSegment=function(geojson,options){if(options=options||{},!helpers.isObject(options))throw new Error("options is invalid");var geometry,featureIndex=options.featureIndex||0,multiFeatureIndex=options.multiFeatureIndex||0,geometryIndex=options.geometryIndex||0,segmentIndex=options.segmentIndex||0,properties=options.properties;switch(geojson.type){case"FeatureCollection":featureIndex<0&&(featureIndex=geojson.features.length+featureIndex),properties=properties||geojson.features[featureIndex].properties,geometry=geojson.features[featureIndex].geometry;break;case"Feature":properties=properties||geojson.properties,geometry=geojson.geometry;break;case"Point":case"MultiPoint":return null;case"LineString":case"Polygon":case"MultiLineString":case"MultiPolygon":geometry=geojson;break;default:throw new Error("geojson is invalid")}if(null===geometry)return null;var coords=geometry.coordinates;switch(geometry.type){case"Point":case"MultiPoint":return null;case"LineString":return segmentIndex<0&&(segmentIndex=coords.length+segmentIndex-1),helpers.lineString([coords[segmentIndex],coords[segmentIndex+1]],properties,options);case"Polygon":return geometryIndex<0&&(geometryIndex=coords.length+geometryIndex),segmentIndex<0&&(segmentIndex=coords[geometryIndex].length+segmentIndex-1),helpers.lineString([coords[geometryIndex][segmentIndex],coords[geometryIndex][segmentIndex+1]],properties,options);case"MultiLineString":return multiFeatureIndex<0&&(multiFeatureIndex=coords.length+multiFeatureIndex),segmentIndex<0&&(segmentIndex=coords[multiFeatureIndex].length+segmentIndex-1),helpers.lineString([coords[multiFeatureIndex][segmentIndex],coords[multiFeatureIndex][segmentIndex+1]],properties,options);case"MultiPolygon":return multiFeatureIndex<0&&(multiFeatureIndex=coords.length+multiFeatureIndex),geometryIndex<0&&(geometryIndex=coords[multiFeatureIndex].length+geometryIndex),segmentIndex<0&&(segmentIndex=coords[multiFeatureIndex][geometryIndex].length-segmentIndex-1),helpers.lineString([coords[multiFeatureIndex][geometryIndex][segmentIndex],coords[multiFeatureIndex][geometryIndex][segmentIndex+1]],properties,options)}throw new Error("geojson is invalid")},exports.findPoint=function(geojson,options){if(options=options||{},!helpers.isObject(options))throw new Error("options is invalid");var geometry,featureIndex=options.featureIndex||0,multiFeatureIndex=options.multiFeatureIndex||0,geometryIndex=options.geometryIndex||0,coordIndex=options.coordIndex||0,properties=options.properties;switch(geojson.type){case"FeatureCollection":featureIndex<0&&(featureIndex=geojson.features.length+featureIndex),properties=properties||geojson.features[featureIndex].properties,geometry=geojson.features[featureIndex].geometry;break;case"Feature":properties=properties||geojson.properties,geometry=geojson.geometry;break;case"Point":case"MultiPoint":return null;case"LineString":case"Polygon":case"MultiLineString":case"MultiPolygon":geometry=geojson;break;default:throw new Error("geojson is invalid")}if(null===geometry)return null;var coords=geometry.coordinates;switch(geometry.type){case"Point":return helpers.point(coords,properties,options);case"MultiPoint":return multiFeatureIndex<0&&(multiFeatureIndex=coords.length+multiFeatureIndex),helpers.point(coords[multiFeatureIndex],properties,options);case"LineString":return coordIndex<0&&(coordIndex=coords.length+coordIndex),helpers.point(coords[coordIndex],properties,options);case"Polygon":return geometryIndex<0&&(geometryIndex=coords.length+geometryIndex),coordIndex<0&&(coordIndex=coords[geometryIndex].length+coordIndex),helpers.point(coords[geometryIndex][coordIndex],properties,options);case"MultiLineString":return multiFeatureIndex<0&&(multiFeatureIndex=coords.length+multiFeatureIndex),coordIndex<0&&(coordIndex=coords[multiFeatureIndex].length+coordIndex),helpers.point(coords[multiFeatureIndex][coordIndex],properties,options);case"MultiPolygon":return multiFeatureIndex<0&&(multiFeatureIndex=coords.length+multiFeatureIndex),geometryIndex<0&&(geometryIndex=coords[multiFeatureIndex].length+geometryIndex),coordIndex<0&&(coordIndex=coords[multiFeatureIndex][geometryIndex].length-coordIndex),helpers.point(coords[multiFeatureIndex][geometryIndex][coordIndex],properties,options)}throw new Error("geojson is invalid")}},{"@turf/helpers":9}],12:[function(require,module,exports){"use strict";var ex,invariant=require("@turf/invariant"),helpers=require("@turf/helpers"),nearestPointOnLine=(ex=require("@turf/nearest-point-on-line"))&&"object"==typeof ex&&"default"in ex?ex.default:ex;function lineSlice(startPt,stopPt,line){var coords=invariant.getCoords(line);if("LineString"!==invariant.getType(line))throw new Error("line must be a LineString");for(var ends,startVertex=nearestPointOnLine(line,startPt),stopVertex=nearestPointOnLine(line,stopPt),clipCoords=[(ends=startVertex.properties.index<=stopVertex.properties.index?[startVertex,stopVertex]:[stopVertex,startVertex])[0].geometry.coordinates],i=ends[0].properties.index+1;i<ends[1].properties.index+1;i++)clipCoords.push(coords[i]);return clipCoords.push(ends[1].geometry.coordinates),helpers.lineString(clipCoords,line.properties)}module.exports=lineSlice,module.exports.default=lineSlice},{"@turf/helpers":16,"@turf/invariant":17,"@turf/nearest-point-on-line":21}],13:[function(require,module,exports){"use strict";var invariant=require("@turf/invariant"),helpers=require("@turf/helpers");function bearing(start,end,options){if(options=options||{},!helpers.isObject(options))throw new Error("options is invalid");if(!0===options.final)return function(start,end){var bear=bearing(end,start);return bear=(bear+180)%360}(start,end);var coordinates1=invariant.getCoord(start),coordinates2=invariant.getCoord(end),lon1=helpers.degreesToRadians(coordinates1[0]),lon2=helpers.degreesToRadians(coordinates2[0]),lat1=helpers.degreesToRadians(coordinates1[1]),lat2=helpers.degreesToRadians(coordinates2[1]),a=Math.sin(lon2-lon1)*Math.cos(lat2),b=Math.cos(lat1)*Math.sin(lat2)-Math.sin(lat1)*Math.cos(lat2)*Math.cos(lon2-lon1);return helpers.radiansToDegrees(Math.atan2(a,b))}module.exports=bearing,module.exports.default=bearing},{"@turf/helpers":16,"@turf/invariant":17}],14:[function(require,module,exports){"use strict";var invariant=require("@turf/invariant"),helpers=require("@turf/helpers");function destination(origin,distance,bearing,options){if(options=options||{},!helpers.isObject(options))throw new Error("options is invalid");var units=options.units,properties=options.properties,coordinates1=invariant.getCoord(origin),longitude1=helpers.degreesToRadians(coordinates1[0]),latitude1=helpers.degreesToRadians(coordinates1[1]),bearing_rad=helpers.degreesToRadians(bearing),radians=helpers.lengthToRadians(distance,units),latitude2=Math.asin(Math.sin(latitude1)*Math.cos(radians)+Math.cos(latitude1)*Math.sin(radians)*Math.cos(bearing_rad)),longitude2=longitude1+Math.atan2(Math.sin(bearing_rad)*Math.sin(radians)*Math.cos(latitude1),Math.cos(radians)-Math.sin(latitude1)*Math.sin(latitude2)),lng=helpers.radiansToDegrees(longitude2),lat=helpers.radiansToDegrees(latitude2);return helpers.point([lng,lat],properties)}module.exports=destination,module.exports.default=destination},{"@turf/helpers":16,"@turf/invariant":17}],15:[function(require,module,exports){"use strict";var invariant=require("@turf/invariant"),helpers=require("@turf/helpers");function distance(from,to,options){if(options=options||{},!helpers.isObject(options))throw new Error("options is invalid");var units=options.units,coordinates1=invariant.getCoord(from),coordinates2=invariant.getCoord(to),dLat=helpers.degreesToRadians(coordinates2[1]-coordinates1[1]),dLon=helpers.degreesToRadians(coordinates2[0]-coordinates1[0]),lat1=helpers.degreesToRadians(coordinates1[1]),lat2=helpers.degreesToRadians(coordinates2[1]),a=Math.pow(Math.sin(dLat/2),2)+Math.pow(Math.sin(dLon/2),2)*Math.cos(lat1)*Math.cos(lat2);return helpers.radiansToLength(2*Math.atan2(Math.sqrt(a),Math.sqrt(1-a)),units)}module.exports=distance,module.exports.default=distance},{"@turf/helpers":16,"@turf/invariant":17}],16:[function(require,module,exports){arguments[4][9][0].apply(exports,arguments)},{dup:9}],17:[function(require,module,exports){arguments[4][10][0].apply(exports,arguments)},{"@turf/helpers":16,dup:10}],18:[function(require,module,exports){"use strict";function _interopDefault(ex){return ex&&"object"==typeof ex&&"default"in ex?ex.default:ex}var rbush=_interopDefault(require("geojson-rbush")),lineSegment=_interopDefault(require("@turf/line-segment")),invariant=require("@turf/invariant"),meta=require("@turf/meta"),helpers=require("@turf/helpers");function lineIntersect(line1,line2){var unique={},results=[];if("LineString"===line1.type&&(line1=helpers.feature(line1)),"LineString"===line2.type&&(line2=helpers.feature(line2)),"Feature"===line1.type&&"Feature"===line2.type&&"LineString"===line1.geometry.type&&"LineString"===line2.geometry.type&&2===line1.geometry.coordinates.length&&2===line2.geometry.coordinates.length){var intersect=intersects(line1,line2);return intersect&&results.push(intersect),helpers.featureCollection(results)}var tree=rbush();return tree.load(lineSegment(line2)),meta.featureEach(lineSegment(line1),function(segment){meta.featureEach(tree.search(segment),function(match){var intersect=intersects(segment,match);if(intersect){var key=invariant.getCoords(intersect).join(",");unique[key]||(unique[key]=!0,results.push(intersect))}})}),helpers.featureCollection(results)}function intersects(line1,line2){var coords1=invariant.getCoords(line1),coords2=invariant.getCoords(line2);if(2!==coords1.length)throw new Error("<intersects> line1 must only contain 2 coordinates");if(2!==coords2.length)throw new Error("<intersects> line2 must only contain 2 coordinates");var x1=coords1[0][0],y1=coords1[0][1],x2=coords1[1][0],y2=coords1[1][1],x3=coords2[0][0],y3=coords2[0][1],x4=coords2[1][0],y4=coords2[1][1],denom=(y4-y3)*(x2-x1)-(x4-x3)*(y2-y1),numeA=(x4-x3)*(y1-y3)-(y4-y3)*(x1-x3),numeB=(x2-x1)*(y1-y3)-(y2-y1)*(x1-x3);if(0===denom)return null;var uA=numeA/denom,uB=numeB/denom;if(uA>=0&&uA<=1&&uB>=0&&uB<=1){var x=x1+uA*(x2-x1),y=y1+uA*(y2-y1);return helpers.point([x,y])}return null}module.exports=lineIntersect,module.exports.default=lineIntersect},{"@turf/helpers":16,"@turf/invariant":17,"@turf/line-segment":19,"@turf/meta":20,"geojson-rbush":22}],19:[function(require,module,exports){"use strict";var helpers=require("@turf/helpers"),invariant=require("@turf/invariant"),meta=require("@turf/meta");function lineSegment(geojson){if(!geojson)throw new Error("geojson is required");var results=[];return meta.flattenEach(geojson,function(feature){!function(geojson,results){var coords=[],geometry=geojson.geometry;switch(geometry.type){case"Polygon":coords=invariant.getCoords(geometry);break;case"LineString":coords=[invariant.getCoords(geometry)]}coords.forEach(function(coord){var segments=function(coords,properties){var segments=[];return coords.reduce(function(previousCoords,currentCoords){var coords1,coords2,x1,y1,x2,y2,segment=helpers.lineString([previousCoords,currentCoords],properties);return segment.bbox=(coords2=currentCoords,x1=(coords1=previousCoords)[0],y1=coords1[1],x2=coords2[0],y2=coords2[1],[x1<x2?x1:x2,y1<y2?y1:y2,x1>x2?x1:x2,y1>y2?y1:y2]),segments.push(segment),currentCoords}),segments}(coord,geojson.properties);segments.forEach(function(segment){segment.id=results.length,results.push(segment)})})}(feature,results)}),helpers.featureCollection(results)}module.exports=lineSegment,module.exports.default=lineSegment},{"@turf/helpers":16,"@turf/invariant":17,"@turf/meta":20}],20:[function(require,module,exports){arguments[4][11][0].apply(exports,arguments)},{"@turf/helpers":16,dup:11}],21:[function(require,module,exports){"use strict";function _interopDefault(ex){return ex&&"object"==typeof ex&&"default"in ex?ex.default:ex}var bearing=_interopDefault(require("@turf/bearing")),distance=_interopDefault(require("@turf/distance")),destination=_interopDefault(require("@turf/destination")),lineIntersects=_interopDefault(require("@turf/line-intersect")),meta=require("@turf/meta"),helpers=require("@turf/helpers"),invariant=require("@turf/invariant");function nearestPointOnLine(lines,pt,options){if(options=options||{},!helpers.isObject(options))throw new Error("options is invalid");var type=lines.geometry?lines.geometry.type:lines.type;if("LineString"!==type&&"MultiLineString"!==type)throw new Error("lines must be LineString or MultiLineString");var closestPt=helpers.point([1/0,1/0],{dist:1/0}),length=0;return meta.flattenEach(lines,function(line){for(var coords=invariant.getCoords(line),i=0;i<coords.length-1;i++){var start=helpers.point(coords[i]);start.properties.dist=distance(pt,start,options);var stop=helpers.point(coords[i+1]);stop.properties.dist=distance(pt,stop,options);var sectionLength=distance(start,stop,options),heightDistance=Math.max(start.properties.dist,stop.properties.dist),direction=bearing(start,stop),perpendicularPt1=destination(pt,heightDistance,direction+90,options),perpendicularPt2=destination(pt,heightDistance,direction-90,options),intersect=lineIntersects(helpers.lineString([perpendicularPt1.geometry.coordinates,perpendicularPt2.geometry.coordinates]),helpers.lineString([start.geometry.coordinates,stop.geometry.coordinates])),intersectPt=null;intersect.features.length>0&&((intersectPt=intersect.features[0]).properties.dist=distance(pt,intersectPt,options),intersectPt.properties.location=length+distance(start,intersectPt,options)),start.properties.dist<closestPt.properties.dist&&((closestPt=start).properties.index=i,closestPt.properties.location=length),stop.properties.dist<closestPt.properties.dist&&((closestPt=stop).properties.index=i+1,closestPt.properties.location=length+sectionLength),intersectPt&&intersectPt.properties.dist<closestPt.properties.dist&&((closestPt=intersectPt).properties.index=i),length+=sectionLength}}),closestPt}module.exports=nearestPointOnLine,module.exports.default=nearestPointOnLine},{"@turf/bearing":13,"@turf/destination":14,"@turf/distance":15,"@turf/helpers":16,"@turf/invariant":17,"@turf/line-intersect":18,"@turf/meta":20}],22:[function(require,module,exports){"use strict";function quickselect(arr,k,left,right,compare){!function quickselectStep(arr,k,left,right,compare){for(;right>left;){if(right-left>600){var n=right-left+1,m=k-left+1,z=Math.log(n),s=.5*Math.exp(2*z/3),sd=.5*Math.sqrt(z*s*(n-s)/n)*(m-n/2<0?-1:1),newLeft=Math.max(left,Math.floor(k-m*s/n+sd)),newRight=Math.min(right,Math.floor(k+(n-m)*s/n+sd));quickselectStep(arr,k,newLeft,newRight,compare)}var t=arr[k],i=left,j=right;for(swap(arr,left,k),compare(arr[right],t)>0&&swap(arr,left,right);i<j;){for(swap(arr,i,j),i++,j--;compare(arr[i],t)<0;)i++;for(;compare(arr[j],t)>0;)j--}0===compare(arr[left],t)?swap(arr,left,j):swap(arr,++j,right),j<=k&&(left=j+1),k<=j&&(right=j-1)}}(arr,k,left||0,right||arr.length-1,compare||defaultCompare)}function swap(arr,i,j){var tmp=arr[i];arr[i]=arr[j],arr[j]=tmp}function defaultCompare(a,b){return a<b?-1:a>b?1:0}function rbush(maxEntries,format){if(!(this instanceof rbush))return new rbush(maxEntries,format);this._maxEntries=Math.max(4,maxEntries||9),this._minEntries=Math.max(2,Math.ceil(.4*this._maxEntries)),format&&this._initFormat(format),this.clear()}function findItem(item,items,equalsFn){if(!equalsFn)return items.indexOf(item);for(var i=0;i<items.length;i++)if(equalsFn(item,items[i]))return i;return-1}function calcBBox(node,toBBox){distBBox(node,0,node.children.length,toBBox,node)}function distBBox(node,k,p,toBBox,destNode){destNode||(destNode=createNode(null)),destNode.minX=1/0,destNode.minY=1/0,destNode.maxX=-1/0,destNode.maxY=-1/0;for(var child,i=k;i<p;i++)child=node.children[i],extend(destNode,node.leaf?toBBox(child):child);return destNode}function extend(a,b){return a.minX=Math.min(a.minX,b.minX),a.minY=Math.min(a.minY,b.minY),a.maxX=Math.max(a.maxX,b.maxX),a.maxY=Math.max(a.maxY,b.maxY),a}function compareNodeMinX(a,b){return a.minX-b.minX}function compareNodeMinY(a,b){return a.minY-b.minY}function bboxArea(a){return(a.maxX-a.minX)*(a.maxY-a.minY)}function bboxMargin(a){return a.maxX-a.minX+(a.maxY-a.minY)}function contains(a,b){return a.minX<=b.minX&&a.minY<=b.minY&&b.maxX<=a.maxX&&b.maxY<=a.maxY}function intersects(a,b){return b.minX<=a.maxX&&b.minY<=a.maxY&&b.maxX>=a.minX&&b.maxY>=a.minY}function createNode(children){return{children:children,height:1,leaf:!0,minX:1/0,minY:1/0,maxX:-1/0,maxY:-1/0}}function multiSelect(arr,left,right,n,compare){for(var mid,stack=[left,right];stack.length;)(right=stack.pop())-(left=stack.pop())<=n||(quickselect(arr,mid=left+Math.ceil((right-left)/n/2)*n,left,right,compare),stack.push(left,mid,mid,right))}function geojsonRbush(maxEntries){var tree=rbush(maxEntries);return tree.insert=function(feature){if(Array.isArray(feature)){var bbox=feature;(feature=bboxPolygon(bbox)).bbox=bbox}else feature.bbox=feature.bbox?feature.bbox:turfBBox(feature);return rbush.prototype.insert.call(this,feature)},tree.load=function(features){var load=[];return Array.isArray(features)?features.forEach(function(bbox){var feature=bboxPolygon(bbox);feature.bbox=bbox,load.push(feature)}):function(geojson,callback){if("Feature"===geojson.type)callback(geojson,0);else if("FeatureCollection"===geojson.type)for(var i=0;i<geojson.features.length;i++)callback(geojson.features[i],i)}(features,function(feature){feature.bbox=feature.bbox?feature.bbox:turfBBox(feature),load.push(feature)}),rbush.prototype.load.call(this,load)},tree.remove=function(feature){if(Array.isArray(feature)){var bbox=feature;(feature=bboxPolygon(bbox)).bbox=bbox}return rbush.prototype.remove.call(this,feature)},tree.clear=function(){return rbush.prototype.clear.call(this)},tree.search=function(geojson){return{type:"FeatureCollection",features:rbush.prototype.search.call(this,this.toBBox(geojson))}},tree.collides=function(geojson){return rbush.prototype.collides.call(this,this.toBBox(geojson))},tree.all=function(){return{type:"FeatureCollection",features:rbush.prototype.all.call(this)}},tree.toJSON=function(){return rbush.prototype.toJSON.call(this)},tree.fromJSON=function(json){return rbush.prototype.fromJSON.call(this,json)},tree.toBBox=function(geojson){var bbox;return{minX:(bbox=geojson.bbox?geojson.bbox:Array.isArray(geojson)&&4===geojson.length?geojson:turfBBox(geojson))[0],minY:bbox[1],maxX:bbox[2],maxY:bbox[3]}},tree}function bboxPolygon(bbox){var lowLeft=[bbox[0],bbox[1]],topLeft=[bbox[0],bbox[3]],topRight=[bbox[2],bbox[3]];return{type:"Feature",bbox:bbox,properties:{},geometry:{type:"Polygon",coordinates:[[lowLeft,[bbox[2],bbox[1]],topRight,topLeft,lowLeft]]}}}function turfBBox(geojson){var bbox=[1/0,1/0,-1/0,-1/0];return function coordEach(geojson,callback,excludeWrapCoord){if(null!==geojson){var featureIndex,geometryIndex,j,k,l,geometry,stopG,coords,geometryMaybeCollection,isGeometryCollection,wrapShrink=0,coordIndex=0,type=geojson.type,isFeatureCollection="FeatureCollection"===type,isFeature="Feature"===type,stop=isFeatureCollection?geojson.features.length:1;for(featureIndex=0;featureIndex<stop;featureIndex++)for(stopG=(isGeometryCollection=!!(geometryMaybeCollection=isFeatureCollection?geojson.features[featureIndex].geometry:isFeature?geojson.geometry:geojson)&&"GeometryCollection"===geometryMaybeCollection.type)?geometryMaybeCollection.geometries.length:1,geometryIndex=0;geometryIndex<stopG;geometryIndex++){var featureSubIndex=0;if(null!==(geometry=isGeometryCollection?geometryMaybeCollection.geometries[geometryIndex]:geometryMaybeCollection)){coords=geometry.coordinates;var geomType=geometry.type;switch(wrapShrink=!excludeWrapCoord||"Polygon"!==geomType&&"MultiPolygon"!==geomType?0:1,geomType){case null:break;case"Point":callback(coords,coordIndex,featureIndex,featureSubIndex),coordIndex++,featureSubIndex++;break;case"LineString":case"MultiPoint":for(j=0;j<coords.length;j++)callback(coords[j],coordIndex,featureIndex,featureSubIndex),coordIndex++,"MultiPoint"===geomType&&featureSubIndex++;"LineString"===geomType&&featureSubIndex++;break;case"Polygon":case"MultiLineString":for(j=0;j<coords.length;j++){for(k=0;k<coords[j].length-wrapShrink;k++)callback(coords[j][k],coordIndex,featureIndex,featureSubIndex),coordIndex++;"MultiLineString"===geomType&&featureSubIndex++}"Polygon"===geomType&&featureSubIndex++;break;case"MultiPolygon":for(j=0;j<coords.length;j++){for(k=0;k<coords[j].length;k++)for(l=0;l<coords[j][k].length-wrapShrink;l++)callback(coords[j][k][l],coordIndex,featureIndex,featureSubIndex),coordIndex++;featureSubIndex++}break;case"GeometryCollection":for(j=0;j<geometry.geometries.length;j++)coordEach(geometry.geometries[j],callback,excludeWrapCoord);break;default:throw new Error("Unknown Geometry Type")}}}}}(geojson,function(coord){bbox[0]>coord[0]&&(bbox[0]=coord[0]),bbox[1]>coord[1]&&(bbox[1]=coord[1]),bbox[2]<coord[0]&&(bbox[2]=coord[0]),bbox[3]<coord[1]&&(bbox[3]=coord[1])}),bbox}rbush.prototype={all:function(){return this._all(this.data,[])},search:function(bbox){var node=this.data,result=[],toBBox=this.toBBox;if(!intersects(bbox,node))return result;for(var i,len,child,childBBox,nodesToSearch=[];node;){for(i=0,len=node.children.length;i<len;i++)child=node.children[i],intersects(bbox,childBBox=node.leaf?toBBox(child):child)&&(node.leaf?result.push(child):contains(bbox,childBBox)?this._all(child,result):nodesToSearch.push(child));node=nodesToSearch.pop()}return result},collides:function(bbox){var node=this.data,toBBox=this.toBBox;if(!intersects(bbox,node))return!1;for(var i,len,child,childBBox,nodesToSearch=[];node;){for(i=0,len=node.children.length;i<len;i++)if(child=node.children[i],intersects(bbox,childBBox=node.leaf?toBBox(child):child)){if(node.leaf||contains(bbox,childBBox))return!0;nodesToSearch.push(child)}node=nodesToSearch.pop()}return!1},load:function(data){if(!data||!data.length)return this;if(data.length<this._minEntries){for(var i=0,len=data.length;i<len;i++)this.insert(data[i]);return this}var node=this._build(data.slice(),0,data.length-1,0);if(this.data.children.length)if(this.data.height===node.height)this._splitRoot(this.data,node);else{if(this.data.height<node.height){var tmpNode=this.data;this.data=node,node=tmpNode}this._insert(node,this.data.height-node.height-1,!0)}else this.data=node;return this},insert:function(item){return item&&this._insert(item,this.data.height-1),this},clear:function(){return this.data=createNode([]),this},remove:function(item,equalsFn){if(!item)return this;for(var i,parent,index,goingUp,node=this.data,bbox=this.toBBox(item),path=[],indexes=[];node||path.length;){if(node||(node=path.pop(),parent=path[path.length-1],i=indexes.pop(),goingUp=!0),node.leaf&&-1!==(index=findItem(item,node.children,equalsFn)))return node.children.splice(index,1),path.push(node),this._condense(path),this;goingUp||node.leaf||!contains(node,bbox)?parent?(i++,node=parent.children[i],goingUp=!1):node=null:(path.push(node),indexes.push(i),i=0,parent=node,node=node.children[0])}return this},toBBox:function(item){return item},compareMinX:compareNodeMinX,compareMinY:compareNodeMinY,toJSON:function(){return this.data},fromJSON:function(data){return this.data=data,this},_all:function(node,result){for(var nodesToSearch=[];node;)node.leaf?result.push.apply(result,node.children):nodesToSearch.push.apply(nodesToSearch,node.children),node=nodesToSearch.pop();return result},_build:function(items,left,right,height){var node,N=right-left+1,M=this._maxEntries;if(N<=M)return calcBBox(node=createNode(items.slice(left,right+1)),this.toBBox),node;height||(height=Math.ceil(Math.log(N)/Math.log(M)),M=Math.ceil(N/Math.pow(M,height-1))),(node=createNode([])).leaf=!1,node.height=height;var i,j,right2,right3,N2=Math.ceil(N/M),N1=N2*Math.ceil(Math.sqrt(M));for(multiSelect(items,left,right,N1,this.compareMinX),i=left;i<=right;i+=N1)for(multiSelect(items,i,right2=Math.min(i+N1-1,right),N2,this.compareMinY),j=i;j<=right2;j+=N2)right3=Math.min(j+N2-1,right2),node.children.push(this._build(items,j,right3,height-1));return calcBBox(node,this.toBBox),node},_chooseSubtree:function(bbox,node,level,path){for(var i,len,child,targetNode,area,enlargement,minArea,minEnlargement,a,b;path.push(node),!node.leaf&&path.length-1!==level;){for(minArea=minEnlargement=1/0,i=0,len=node.children.length;i<len;i++)area=bboxArea(child=node.children[i]),a=bbox,b=child,(enlargement=(Math.max(b.maxX,a.maxX)-Math.min(b.minX,a.minX))*(Math.max(b.maxY,a.maxY)-Math.min(b.minY,a.minY))-area)<minEnlargement?(minEnlargement=enlargement,minArea=area<minArea?area:minArea,targetNode=child):enlargement===minEnlargement&&area<minArea&&(minArea=area,targetNode=child);node=targetNode||node.children[0]}return node},_insert:function(item,level,isNode){var toBBox=this.toBBox,bbox=isNode?item:toBBox(item),insertPath=[],node=this._chooseSubtree(bbox,this.data,level,insertPath);for(node.children.push(item),extend(node,bbox);level>=0&&insertPath[level].children.length>this._maxEntries;)this._split(insertPath,level),level--;this._adjustParentBBoxes(bbox,insertPath,level)},_split:function(insertPath,level){var node=insertPath[level],M=node.children.length,m=this._minEntries;this._chooseSplitAxis(node,m,M);var splitIndex=this._chooseSplitIndex(node,m,M),newNode=createNode(node.children.splice(splitIndex,node.children.length-splitIndex));newNode.height=node.height,newNode.leaf=node.leaf,calcBBox(node,this.toBBox),calcBBox(newNode,this.toBBox),level?insertPath[level-1].children.push(newNode):this._splitRoot(node,newNode)},_splitRoot:function(node,newNode){this.data=createNode([node,newNode]),this.data.height=node.height+1,this.data.leaf=!1,calcBBox(this.data,this.toBBox)},_chooseSplitIndex:function(node,m,M){var i,bbox1,bbox2,overlap,area,minOverlap,minArea,index,a,b,minX,minY,maxX,maxY;for(minOverlap=minArea=1/0,i=m;i<=M-m;i++)bbox1=distBBox(node,0,i,this.toBBox),bbox2=distBBox(node,i,M,this.toBBox),a=bbox1,b=bbox2,void 0,void 0,void 0,void 0,minX=Math.max(a.minX,b.minX),minY=Math.max(a.minY,b.minY),maxX=Math.min(a.maxX,b.maxX),maxY=Math.min(a.maxY,b.maxY),overlap=Math.max(0,maxX-minX)*Math.max(0,maxY-minY),area=bboxArea(bbox1)+bboxArea(bbox2),overlap<minOverlap?(minOverlap=overlap,index=i,minArea=area<minArea?area:minArea):overlap===minOverlap&&area<minArea&&(minArea=area,index=i);return index},_chooseSplitAxis:function(node,m,M){var compareMinX=node.leaf?this.compareMinX:compareNodeMinX,compareMinY=node.leaf?this.compareMinY:compareNodeMinY;this._allDistMargin(node,m,M,compareMinX)<this._allDistMargin(node,m,M,compareMinY)&&node.children.sort(compareMinX)},_allDistMargin:function(node,m,M,compare){node.children.sort(compare);var i,child,toBBox=this.toBBox,leftBBox=distBBox(node,0,m,toBBox),rightBBox=distBBox(node,M-m,M,toBBox),margin=bboxMargin(leftBBox)+bboxMargin(rightBBox);for(i=m;i<M-m;i++)child=node.children[i],extend(leftBBox,node.leaf?toBBox(child):child),margin+=bboxMargin(leftBBox);for(i=M-m-1;i>=m;i--)child=node.children[i],extend(rightBBox,node.leaf?toBBox(child):child),margin+=bboxMargin(rightBBox);return margin},_adjustParentBBoxes:function(bbox,path,level){for(var i=level;i>=0;i--)extend(path[i],bbox)},_condense:function(path){for(var siblings,i=path.length-1;i>=0;i--)0===path[i].children.length?i>0?(siblings=path[i-1].children).splice(siblings.indexOf(path[i]),1):this.clear():calcBBox(path[i],this.toBBox)},_initFormat:function(format){var compareArr=["return a"," - b",";"];this.compareMinX=new Function("a","b",compareArr.join(format[0])),this.compareMinY=new Function("a","b",compareArr.join(format[1])),this.toBBox=new Function("a","return {minX: a"+format[0]+", minY: a"+format[1]+", maxX: a"+format[2]+", maxY: a"+format[3]+"};")}},module.exports=geojsonRbush,module.exports.default=geojsonRbush},{}],23:[function(require,module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var helpers=require("@turf/helpers");function coordEach(geojson,callback,excludeWrapCoord){if(null!==geojson)for(var j,k,l,geometry,stopG,coords,geometryMaybeCollection,isGeometryCollection,wrapShrink=0,coordIndex=0,type=geojson.type,isFeatureCollection="FeatureCollection"===type,isFeature="Feature"===type,stop=isFeatureCollection?geojson.features.length:1,featureIndex=0;featureIndex<stop;featureIndex++){stopG=(isGeometryCollection=!!(geometryMaybeCollection=isFeatureCollection?geojson.features[featureIndex].geometry:isFeature?geojson.geometry:geojson)&&"GeometryCollection"===geometryMaybeCollection.type)?geometryMaybeCollection.geometries.length:1;for(var geomIndex=0;geomIndex<stopG;geomIndex++){var multiFeatureIndex=0,geometryIndex=0;if(null!==(geometry=isGeometryCollection?geometryMaybeCollection.geometries[geomIndex]:geometryMaybeCollection)){coords=geometry.coordinates;var geomType=geometry.type;switch(wrapShrink=!excludeWrapCoord||"Polygon"!==geomType&&"MultiPolygon"!==geomType?0:1,geomType){case null:break;case"Point":if(!1===callback(coords,coordIndex,featureIndex,multiFeatureIndex,geometryIndex))return!1;coordIndex++,multiFeatureIndex++;break;case"LineString":case"MultiPoint":for(j=0;j<coords.length;j++){if(!1===callback(coords[j],coordIndex,featureIndex,multiFeatureIndex,geometryIndex))return!1;coordIndex++,"MultiPoint"===geomType&&multiFeatureIndex++}"LineString"===geomType&&multiFeatureIndex++;break;case"Polygon":case"MultiLineString":for(j=0;j<coords.length;j++){for(k=0;k<coords[j].length-wrapShrink;k++){if(!1===callback(coords[j][k],coordIndex,featureIndex,multiFeatureIndex,geometryIndex))return!1;coordIndex++}"MultiLineString"===geomType&&multiFeatureIndex++,"Polygon"===geomType&&geometryIndex++}"Polygon"===geomType&&multiFeatureIndex++;break;case"MultiPolygon":for(j=0;j<coords.length;j++){for(geometryIndex=0,k=0;k<coords[j].length;k++){for(l=0;l<coords[j][k].length-wrapShrink;l++){if(!1===callback(coords[j][k][l],coordIndex,featureIndex,multiFeatureIndex,geometryIndex))return!1;coordIndex++}geometryIndex++}multiFeatureIndex++}break;case"GeometryCollection":for(j=0;j<geometry.geometries.length;j++)if(!1===coordEach(geometry.geometries[j],callback,excludeWrapCoord))return!1;break;default:throw new Error("Unknown Geometry Type")}}}}}function propEach(geojson,callback){var i;switch(geojson.type){case"FeatureCollection":for(i=0;i<geojson.features.length&&!1!==callback(geojson.features[i].properties,i);i++);break;case"Feature":callback(geojson.properties,0)}}function featureEach(geojson,callback){if("Feature"===geojson.type)callback(geojson,0);else if("FeatureCollection"===geojson.type)for(var i=0;i<geojson.features.length&&!1!==callback(geojson.features[i],i);i++);}function geomEach(geojson,callback){var i,j,g,geometry,stopG,geometryMaybeCollection,isGeometryCollection,featureProperties,featureBBox,featureId,featureIndex=0,isFeatureCollection="FeatureCollection"===geojson.type,isFeature="Feature"===geojson.type,stop=isFeatureCollection?geojson.features.length:1;for(i=0;i<stop;i++){for(geometryMaybeCollection=isFeatureCollection?geojson.features[i].geometry:isFeature?geojson.geometry:geojson,featureProperties=isFeatureCollection?geojson.features[i].properties:isFeature?geojson.properties:{},featureBBox=isFeatureCollection?geojson.features[i].bbox:isFeature?geojson.bbox:void 0,featureId=isFeatureCollection?geojson.features[i].id:isFeature?geojson.id:void 0,stopG=(isGeometryCollection=!!geometryMaybeCollection&&"GeometryCollection"===geometryMaybeCollection.type)?geometryMaybeCollection.geometries.length:1,g=0;g<stopG;g++)if(null!==(geometry=isGeometryCollection?geometryMaybeCollection.geometries[g]:geometryMaybeCollection))switch(geometry.type){case"Point":case"LineString":case"MultiPoint":case"Polygon":case"MultiLineString":case"MultiPolygon":if(!1===callback(geometry,featureIndex,featureProperties,featureBBox,featureId))return!1;break;case"GeometryCollection":for(j=0;j<geometry.geometries.length;j++)if(!1===callback(geometry.geometries[j],featureIndex,featureProperties,featureBBox,featureId))return!1;break;default:throw new Error("Unknown Geometry Type")}else if(!1===callback(null,featureIndex,featureProperties,featureBBox,featureId))return!1;featureIndex++}}function flattenEach(geojson,callback){geomEach(geojson,function(geometry,featureIndex,properties,bbox,id){var geomType,type=null===geometry?null:geometry.type;switch(type){case null:case"Point":case"LineString":case"Polygon":return!1!==callback(helpers.feature(geometry,properties,{bbox:bbox,id:id}),featureIndex,0)&&void 0}switch(type){case"MultiPoint":geomType="Point";break;case"MultiLineString":geomType="LineString";break;case"MultiPolygon":geomType="Polygon"}for(var multiFeatureIndex=0;multiFeatureIndex<geometry.coordinates.length;multiFeatureIndex++){var geom={type:geomType,coordinates:geometry.coordinates[multiFeatureIndex]};if(!1===callback(helpers.feature(geom,properties),featureIndex,multiFeatureIndex))return!1}})}function segmentEach(geojson,callback){flattenEach(geojson,function(feature,featureIndex,multiFeatureIndex){var segmentIndex=0;if(feature.geometry){var type=feature.geometry.type;if("Point"!==type&&"MultiPoint"!==type){var previousCoords,previousFeatureIndex=0,previousMultiIndex=0,prevGeomIndex=0;return!1!==coordEach(feature,function(currentCoord,coordIndex,featureIndexCoord,multiPartIndexCoord,geometryIndex){if(void 0===previousCoords||featureIndex>previousFeatureIndex||multiPartIndexCoord>previousMultiIndex||geometryIndex>prevGeomIndex)return previousCoords=currentCoord,previousFeatureIndex=featureIndex,previousMultiIndex=multiPartIndexCoord,prevGeomIndex=geometryIndex,void(segmentIndex=0);var currentSegment=helpers.lineString([previousCoords,currentCoord],feature.properties);if(!1===callback(currentSegment,featureIndex,multiFeatureIndex,geometryIndex,segmentIndex))return!1;segmentIndex++,previousCoords=currentCoord})&&void 0}}})}function lineEach(geojson,callback){if(!geojson)throw new Error("geojson is required");flattenEach(geojson,function(feature,featureIndex,multiFeatureIndex){if(null!==feature.geometry){var type=feature.geometry.type,coords=feature.geometry.coordinates;switch(type){case"LineString":if(!1===callback(feature,featureIndex,multiFeatureIndex,0,0))return!1;break;case"Polygon":for(var geometryIndex=0;geometryIndex<coords.length;geometryIndex++)if(!1===callback(helpers.lineString(coords[geometryIndex],feature.properties),featureIndex,multiFeatureIndex,geometryIndex))return!1}}})}exports.coordEach=coordEach,exports.coordReduce=function(geojson,callback,initialValue,excludeWrapCoord){var previousValue=initialValue;return coordEach(geojson,function(currentCoord,coordIndex,featureIndex,multiFeatureIndex,geometryIndex){previousValue=0===coordIndex&&void 0===initialValue?currentCoord:callback(previousValue,currentCoord,coordIndex,featureIndex,multiFeatureIndex,geometryIndex)},excludeWrapCoord),previousValue},exports.propEach=propEach,exports.propReduce=function(geojson,callback,initialValue){var previousValue=initialValue;return propEach(geojson,function(currentProperties,featureIndex){previousValue=0===featureIndex&&void 0===initialValue?currentProperties:callback(previousValue,currentProperties,featureIndex)}),previousValue},exports.featureEach=featureEach,exports.featureReduce=function(geojson,callback,initialValue){var previousValue=initialValue;return featureEach(geojson,function(currentFeature,featureIndex){previousValue=0===featureIndex&&void 0===initialValue?currentFeature:callback(previousValue,currentFeature,featureIndex)}),previousValue},exports.coordAll=function(geojson){var coords=[];return coordEach(geojson,function(coord){coords.push(coord)}),coords},exports.geomEach=geomEach,exports.geomReduce=function(geojson,callback,initialValue){var previousValue=initialValue;return geomEach(geojson,function(currentGeometry,featureIndex,featureProperties,featureBBox,featureId){previousValue=0===featureIndex&&void 0===initialValue?currentGeometry:callback(previousValue,currentGeometry,featureIndex,featureProperties,featureBBox,featureId)}),previousValue},exports.flattenEach=flattenEach,exports.flattenReduce=function(geojson,callback,initialValue){var previousValue=initialValue;return flattenEach(geojson,function(currentFeature,featureIndex,multiFeatureIndex){previousValue=0===featureIndex&&0===multiFeatureIndex&&void 0===initialValue?currentFeature:callback(previousValue,currentFeature,featureIndex,multiFeatureIndex)}),previousValue},exports.segmentEach=segmentEach,exports.segmentReduce=function(geojson,callback,initialValue){var previousValue=initialValue,started=!1;return segmentEach(geojson,function(currentSegment,featureIndex,multiFeatureIndex,geometryIndex,segmentIndex){previousValue=!1===started&&void 0===initialValue?currentSegment:callback(previousValue,currentSegment,featureIndex,multiFeatureIndex,geometryIndex,segmentIndex),started=!0}),previousValue},exports.lineEach=lineEach,exports.lineReduce=function(geojson,callback,initialValue){var previousValue=initialValue;return lineEach(geojson,function(currentLine,featureIndex,multiFeatureIndex,geometryIndex){previousValue=0===featureIndex&&void 0===initialValue?currentLine:callback(previousValue,currentLine,featureIndex,multiFeatureIndex,geometryIndex)}),previousValue},exports.findSegment=function(geojson,options){if(options=options||{},!helpers.isObject(options))throw new Error("options is invalid");var geometry,featureIndex=options.featureIndex||0,multiFeatureIndex=options.multiFeatureIndex||0,geometryIndex=options.geometryIndex||0,segmentIndex=options.segmentIndex||0,properties=options.properties;switch(geojson.type){case"FeatureCollection":featureIndex<0&&(featureIndex=geojson.features.length+featureIndex),properties=properties||geojson.features[featureIndex].properties,geometry=geojson.features[featureIndex].geometry;break;case"Feature":properties=properties||geojson.properties,geometry=geojson.geometry;break;case"Point":case"MultiPoint":return null;case"LineString":case"Polygon":case"MultiLineString":case"MultiPolygon":geometry=geojson;break;default:throw new Error("geojson is invalid")}if(null===geometry)return null;var coords=geometry.coordinates;switch(geometry.type){case"Point":case"MultiPoint":return null;case"LineString":return segmentIndex<0&&(segmentIndex=coords.length+segmentIndex-1),helpers.lineString([coords[segmentIndex],coords[segmentIndex+1]],properties,options);case"Polygon":return geometryIndex<0&&(geometryIndex=coords.length+geometryIndex),segmentIndex<0&&(segmentIndex=coords[geometryIndex].length+segmentIndex-1),helpers.lineString([coords[geometryIndex][segmentIndex],coords[geometryIndex][segmentIndex+1]],properties,options);case"MultiLineString":return multiFeatureIndex<0&&(multiFeatureIndex=coords.length+multiFeatureIndex),segmentIndex<0&&(segmentIndex=coords[multiFeatureIndex].length+segmentIndex-1),helpers.lineString([coords[multiFeatureIndex][segmentIndex],coords[multiFeatureIndex][segmentIndex+1]],properties,options);case"MultiPolygon":return multiFeatureIndex<0&&(multiFeatureIndex=coords.length+multiFeatureIndex),geometryIndex<0&&(geometryIndex=coords[multiFeatureIndex].length+geometryIndex),segmentIndex<0&&(segmentIndex=coords[multiFeatureIndex][geometryIndex].length-segmentIndex-1),helpers.lineString([coords[multiFeatureIndex][geometryIndex][segmentIndex],coords[multiFeatureIndex][geometryIndex][segmentIndex+1]],properties,options)}throw new Error("geojson is invalid")},exports.findPoint=function(geojson,options){if(options=options||{},!helpers.isObject(options))throw new Error("options is invalid");var geometry,featureIndex=options.featureIndex||0,multiFeatureIndex=options.multiFeatureIndex||0,geometryIndex=options.geometryIndex||0,coordIndex=options.coordIndex||0,properties=options.properties;switch(geojson.type){case"FeatureCollection":featureIndex<0&&(featureIndex=geojson.features.length+featureIndex),properties=properties||geojson.features[featureIndex].properties,geometry=geojson.features[featureIndex].geometry;break;case"Feature":properties=properties||geojson.properties,geometry=geojson.geometry;break;case"Point":case"MultiPoint":return null;case"LineString":case"Polygon":case"MultiLineString":case"MultiPolygon":geometry=geojson;break;default:throw new Error("geojson is invalid")}if(null===geometry)return null;var coords=geometry.coordinates;switch(geometry.type){case"Point":return helpers.point(coords,properties,options);case"MultiPoint":return multiFeatureIndex<0&&(multiFeatureIndex=coords.length+multiFeatureIndex),helpers.point(coords[multiFeatureIndex],properties,options);case"LineString":return coordIndex<0&&(coordIndex=coords.length+coordIndex),helpers.point(coords[coordIndex],properties,options);case"Polygon":return geometryIndex<0&&(geometryIndex=coords.length+geometryIndex),coordIndex<0&&(coordIndex=coords[geometryIndex].length+coordIndex),helpers.point(coords[geometryIndex][coordIndex],properties,options);case"MultiLineString":return multiFeatureIndex<0&&(multiFeatureIndex=coords.length+multiFeatureIndex),coordIndex<0&&(coordIndex=coords[multiFeatureIndex].length+coordIndex),helpers.point(coords[multiFeatureIndex][coordIndex],properties,options);case"MultiPolygon":return multiFeatureIndex<0&&(multiFeatureIndex=coords.length+multiFeatureIndex),geometryIndex<0&&(geometryIndex=coords[multiFeatureIndex].length+geometryIndex),coordIndex<0&&(coordIndex=coords[multiFeatureIndex][geometryIndex].length-coordIndex),helpers.point(coords[multiFeatureIndex][geometryIndex][coordIndex],properties,options)}throw new Error("geojson is invalid")}},{"@turf/helpers":5}],24:[function(require,module,exports){module.exports={meta:require("@turf/meta"),helpers:require("@turf/helpers"),lineOffset:require("@turf/line-offset"),lineSlice:require("@turf/line-slice"),distance:require("@turf/distance"),length:require("@turf/length"),along:require("@turf/along")}},{"@turf/along":1,"@turf/distance":4,"@turf/helpers":5,"@turf/length":7,"@turf/line-offset":8,"@turf/line-slice":12,"@turf/meta":23}]},{},[24])(24)});
